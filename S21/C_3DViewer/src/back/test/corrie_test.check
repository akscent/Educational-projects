#include <check.h>
#include "../s21_3dparser.h"


#suite init_shape
    #test test_init_cube       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        s21_clearShape(&cube);
    #test test_init_tetrahedron
        Shape tetrahedron;  
        double array[114] = {0.000000, -0.230941, 0.669197, -0.078384, -0.185686, 0.509197, -0.058788, -0.264882, 0.573197, -0.741212, -0.658879, -0.541197, -0.721616, -0.557056, -0.541197, -0.800000, -0.692820, -0.637197, -0.741212, -0.590997, -0.637197, -0.078384, 0.557056, -0.541197, -0.058788, 0.590997, -0.637197, -0.000000, 0.692820, -0.637197, 0.800000, -0.692820, -0.637197, 0.078384, 0.557056, -0.541197, 0.721616, -0.557056, -0.541197, 0.078384, -0.185686, 0.509197, 0.000000, -0.163058, 0.573197, -0.000000, 0.624938, -0.541197, -0.643233, -0.602311, -0.669197, 0.000000, 0.511801, -0.669197, 0.041433, 0.493056, -0.541197, 0.647716, -0.557056, -0.541197, 0.041433, -0.207019, 0.448857, -0.000000, -0.230941, 0.533433, 0.689149, -0.628820, -0.591942, 0.000000, -0.278783, 0.448858, 0.606282, -0.628820, -0.541197, 0.643233, -0.692820, -0.541197, 0.000000, -0.321450, 0.509197, 0.000000, 0.564820, -0.591942, 0.606282, -0.580977, -0.608858, 0.643233, -0.602311, -0.669197, -0.606282, -0.580977, -0.608858, -0.689149, -0.628820, -0.591942, -0.041433, -0.207019, 0.448858, -0.041433, 0.493056, -0.541197, -0.647716, -0.557056, -0.541197, -0.606282, -0.628820, -0.541197, -0.643233, -0.692820, -0.541197, 0.000000, 0.469134, -0.608858};        
        int status = s21_initShape(&tetrahedron, "../../obj/tetrahedron.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(tetrahedron.countLines, 504);
        ck_assert_uint_eq(tetrahedron.countVertexes/3, 38);
        ck_assert_uint_eq(tetrahedron.countV, 38);
        ck_assert_uint_eq(tetrahedron.countL, 84);
        for (unsigned int i = 0; i < tetrahedron.countVertexes; i++) {
            ck_assert_double_eq_tol(tetrahedron.vertexes[i], array[i], 1e-6);
        }
        s21_clearShape(&tetrahedron);
    #test test_init_invalid_file_format
        Shape shape;       
        int status = s21_initShape(&shape, "../../obj/invalid.obj");
        ck_assert_int_eq(status, 1);
    #test test_init_file_missing1
        Shape cube;
        int status = s21_initShape(&cube, "../file.obj");
        ck_assert_int_eq(status, 1);
    #test test_init_file_missing2
        Shape cube;
        int status = s21_initShape(&cube, "../file.txt");
        ck_assert_int_eq(status, 1);
    #test test_init_empty_file
        Shape cube;
        int status = s21_initShape(&cube, "../../obj/empty.obj");
        ck_assert_int_eq(status, 1);
    #test test_init_invalid_path
        Shape cube;
        int status = s21_initShape(&cube, "../../obj/b../../obj/lobg/cube.obj");
        ck_assert_int_eq(status, 1);
    #test test_init_correct_memory_allocate
        Shape cube;
        int status = s21_initShape(&cube, "../../obj/Car.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_ptr_nonnull(cube.vertexes);
        s21_clearShape(&cube);

#suite rotate_shape
    #test test_rotate_cube_x       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.800000, -0.000000, -1.131371, -0.800000, -1.131371, 0.000000, -0.800000, 1.131371, -0.000000, -0.800000, 0.000000, 1.131371, 0.800000, -0.000000, -1.131371, 0.800000, -1.131371, 0.000000, 0.800000, 1.131371, -0.000000, 0.800000, 0.000000, 1.131371};
        figure_rotation(&cube, 45.0, 0, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_rotate_cube_y       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.800000, -0.800000, 0.800000, 0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, -0.800000};
        figure_rotation(&cube, 0.0, 90.0, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_rotate_cube_xyz       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        ck_assert_uint_eq(cube.countVertexes, 24);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.292820, -1.092820, -0.800000, -0.292820, -1.092820, 0.800000, -1.092820, 0.292820, -0.800000, -1.092820, 0.292820, 0.800000, 1.092820, -0.292820, -0.800000, 1.092820, -0.292820, 0.800000, 0.292820, 1.092820, -0.800000, 0.292820, 1.092820, 0.800000};
        figure_rotation(&cube, 0.0, 0.0, 30.0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_rotate_cube_z       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        ck_assert_uint_eq(cube.countVertexes, 24);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {0.000000, -1.379796, 0.127135, 1.131371, -0.400000, 0.692820, -1.131371, -0.400000, 0.692820, -0.000000, 0.579796, 1.258506, 0.000000, -0.579796, -1.258506, 1.131371, 0.400000, -0.692820, -1.131371, 0.400000, -0.692820, -0.000000, 1.379796, -0.127135};
        figure_rotation(&cube, 45.0, 0.0, 0.0);
        figure_rotation(&cube, 0.0, 60.0, 0.0);
        figure_rotation(&cube, 0.0, 0.0, 90.0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);

#suite scale_shape
    #test test_scale_cube_plus       
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-2.400000, -2.400000, -2.400000, -2.400000, -2.400000, 2.400000, -2.400000, 2.400000, -2.400000, -2.400000, 2.400000, 2.400000, 2.400000, -2.400000, -2.400000, 2.400000, -2.400000, 2.400000, 2.400000, 2.400000, -2.400000, 2.400000, 2.400000, 2.400000};
        s21_setScale(&cube, 3);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_scale_cube_plus2      
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-8.080000, -8.080000, -8.080000, -8.080000, -8.080000, 8.080000, -8.080000, 8.080000, -8.080000, -8.080000, 8.080000, 8.080000, 8.080000, -8.080000, -8.080000, 8.080000, -8.080000, 8.080000, 8.080000, 8.080000, -8.080000, 8.080000, 8.080000, 8.080000};
        s21_setScale(&cube, 10.1);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_scale_cube_plus3      
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.800080, -0.800080, -0.800080, -0.800080, -0.800080, 0.800080, -0.800080, 0.800080, -0.800080, -0.800080, 0.800080, 0.800080, 0.800080, -0.800080, -0.800080, 0.800080, -0.800080, 0.800080, 0.800080, 0.800080, -0.800080, 0.800080, 0.800080, 0.800080};
        s21_setScale(&cube, 1.0001);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);

#suite drifting_shape
    #test test_drifting_cube_plus_x      
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {1.200000, -0.800000, -0.800000, 1.200000, -0.800000, 0.800000, 1.200000,  0.800000, -0.800000, 1.200000,  0.800000,  0.800000, 2.800000, -0.800000, -0.800000, 2.800000, -0.800000,  0.800000, 2.800000,  0.800000, -0.800000, 2.800000,  0.800000,  0.800000};
        s21_shifting(&cube, 2, AXIS_X);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_drifting_cube_plus_y      
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.800000, 9.200600, -0.800000, -0.800000,   9.200600,   0.800000, -0.800000,  10.800600,  -0.800000, -0.800000,  10.800600,   0.800000,  0.800000,   9.200600,  -0.800000,  0.800000,   9.200600,   0.800000,  0.800000,  10.800600,  -0.800000,  0.800000,  10.800600,   0.800000};
        s21_shifting(&cube, 10.0006, AXIS_Y);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);
    #test test_drifting_cube_plus_z      
        Shape cube;
        double array[24] = {-0.800000, -0.800000, -0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, -0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, -0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000, -0.800000, 0.800000, 0.800000, 0.800000};       
        int status = s21_initShape(&cube, "../../obj/cube.obj");
        ck_assert_int_eq(status, 0);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq(cube.vertexes[i],array[i]);
        }
        double array2[24] = {-0.800000,  -0.799900,  -0.800000, -0.800000,  -0.799900,   0.800000, -0.800000,   0.800100,  -0.800000, -0.800000,   0.800100,   0.800000,  0.800000,  -0.799900,  -0.800000,  0.800000,  -0.799900,   0.800000,  0.800000,   0.800100,  -0.800000,  0.800000,   0.800100,   0.800000, };
        s21_shifting(&cube, 0.0001, AXIS_Y);
        ck_assert_uint_eq(cube.countLines, 60);
        ck_assert_uint_eq(cube.countVertexes, 24);
        ck_assert_uint_eq(cube.countV, 8);
        ck_assert_uint_eq(cube.countL, 10);
        for (unsigned int i = 0; i < cube.countVertexes; i++) {
            ck_assert_double_eq_tol(cube.vertexes[i],array2[i], 0.000001);
        }
        s21_clearShape(&cube);          

 







