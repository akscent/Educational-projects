#include <check.h>
#include "../s21_3dparser.h"

#test check_init_shape
  clock_t start_time = clock();
  Shape shape;
  int ret = s21_initShape(&shape, "../../obj/skull.obj");
  clock_t end_time = clock();
  double elapsed_time = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
  printf("Время выполнения: %f секунд\n", elapsed_time);
  ck_assert_int_eq(ret, 0);
  s21_clearShape(&shape);

  #test check_null_obj
  Shape shape;
  int ret = s21_initShape(&shape, NULL);
  ck_assert_int_eq(ret, 1);

  #test check_null_shape
  int ret = s21_initShape(NULL, "../../obj/skull.obj");
  ck_assert_int_eq(ret, 1);

  #test check_struct
  int ret = 0;
  Shape shape;
  ck_assert_int_eq(s21_initShape(&shape, "../../obj/cube.obj"), ret);

  unsigned countLines = 60, countVertexes = 24;
  double scale = 1;
  ck_assert_uint_eq(countLines, shape.countLines);
  ck_assert_uint_eq(countVertexes, shape.countVertexes);
  ck_assert_uint_eq(scale, shape.scale);
//  printf("Test check_struct\n");
//  printShape(&shape);
  s21_clearShape(&shape);

  #test check_scale
  int ret = 0;
  Shape shape;
  ck_assert_int_eq(s21_initShape(&shape, "../../obj/cube.obj"), ret);
  unsigned countLines = 60, countVertexes = 24;
  long long lines[] = {0, 6, 6, 4, 4, 0, 0, 2, 2, 6, 6, 0, 0, 3, 3, 2, 2, 0, 0, 1, 1, 3, 3, 0, 2, 7, 7, 6, 6, 2, 2, 3, 3, 7, 7, 2, 4, 6, 6, 7, 7, 4, 4, 7, 7, 5, 5, 4, 0, 4, 4, 5, 5, 0, 0, 5, 5, 1, 1, 0};
  double vertexes[] = {-1.600000, -1.600000, -1.600000, -1.600000, -1.600000, 1.600000, -1.600000, 1.600000, -1.600000, -1.600000, 1.600000, 1.600000, 1.600000, -1.600000, -1.600000, 1.600000, -1.600000, 1.600000, 1.600000, 1.600000, -1.600000, 1.600000, 1.600000, 1.600000};
  double scale = 1;

  ck_assert_uint_eq(countLines, shape.countLines);
  ck_assert_uint_eq(countVertexes, shape.countVertexes);
  ck_assert_uint_eq(scale, shape.scale);
  s21_setScale(&shape, 2);
  for (unsigned i = 0; i < countLines; ++i)
    ck_assert_int_eq(shape.lines[i], lines[i]);
  for (unsigned i = 0; i < countVertexes; ++i)
    ck_assert_double_eq_tol(shape.vertexes[i], vertexes[i], 1e-6);
  s21_clearShape(&shape);

  #test check_s21_shifting
  int ret = 0;
  Shape shape;
  ck_assert_int_eq(s21_initShape(&shape, "../../obj/cube.obj"), ret);

  unsigned countLines = 60, countVertexes = 24;
  long long lines[] = {0, 6, 6, 4, 4, 0, 0, 2, 2, 6, 6, 0, 0, 3, 3, 2, 2, 0, 0, 1, 1, 3, 3, 0, 2, 7, 7, 6, 6, 2, 2, 3, 3, 7, 7, 2, 4, 6, 6, 7, 7, 4, 4, 7, 7, 5, 5, 4, 0, 4, 4, 5, 5, 0, 0, 5, 5, 1, 1, 0};

  double vertexes[] = {1.200000, 1.200000, 1.200000, 1.200000, 1.200000, 2.800000, 1.200000, 2.800000, 1.200000, 1.200000, 2.800000, 2.800000, 2.800000, 1.200000, 1.200000, 2.800000, 1.200000, 2.800000, 2.800000, 2.800000, 1.200000, 2.800000, 2.800000, 2.800000};
  double scale = 1;

  ck_assert_uint_eq(countLines, shape.countLines);
  ck_assert_uint_eq(countVertexes, shape.countVertexes);
  ck_assert_uint_eq(scale, shape.scale);
  double dShifts[3] = {2, 2, 2};
  s21_shifting(&shape, dShifts[0], AXIS_X);
  s21_shifting(&shape, dShifts[0], AXIS_Y);
  s21_shifting(&shape, dShifts[0], AXIS_Z);
  for (unsigned i = 0; i < countLines; ++i)
    ck_assert_int_eq(shape.lines[i], lines[i]);
  for (unsigned i = 0; i < countVertexes; ++i)
    ck_assert_double_eq_tol(shape.vertexes[i], vertexes[i], 1e-6);
  s21_clearShape(&shape);
