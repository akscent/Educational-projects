#include <check.h>
#include <math.h>
#include <limits.h>
#include <float.h>

#include "../s21_decimal.h"


#suite addition
    #test addition_01
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(
            result.bits[0] + result.bits[1] + result.bits[2] + result.bits[3], 0);
        ck_assert_int_eq(return_value, 0);

    #test addition_02
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(
            result.bits[0] + result.bits[1] + result.bits[2] + result.bits[3], 0);
        ck_assert_int_eq(return_value, 0);

    #test addition_03
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{1, 1, 1, 0}};
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 1);

    #test addition_04
        s21_decimal value_1 = {0};
        s21_decimal value_2 = {0};
        s21_decimal result = {0};
        int x = 10, y = 10, z = 20, result_int = 0;
        s21_from_int_to_decimal(x, &value_1);
        s21_from_int_to_decimal(y, &value_2);
        int return_value = s21_add(value_1, value_2, &result);
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result_int, z);

    #test addition_05
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_1 = {{1, 0, 0, 0x80000000}};
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 4294967294);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0);

    #test addition_06
        s21_decimal value_2 = {{1, 0, 0, 0}};  // 1
        s21_decimal value_1 = {{1, 0, 0, 0x80000000}}; // -1
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0);
        ck_assert_int_eq(result.bits[1], 0);
        ck_assert_int_eq(result.bits[2], 0);
        ck_assert_int_eq(result.bits[3], 0);

    #test addition_07
        s21_decimal value_2 = {{1123, 0, 0, 0}};  // 1123
        s21_decimal value_1 = {{23, 0, 0, 0x80000000}}; // -23
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 1100);
        ck_assert_int_eq(result.bits[1], 0);
        ck_assert_int_eq(result.bits[2], 0);
        ck_assert_int_eq(result.bits[3], 0);
    
    #test addition_08
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};  // 79,228,162,514,264,337,593,543,950,335
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0);
        ck_assert_int_eq(result.bits[1], 0);
        ck_assert_int_eq(result.bits[2], 0);
        ck_assert_int_eq(result.bits[3], 0);

    #test addition_09
        s21_decimal value_2 = {{6, 0, 0, 0x00010000}};  // 0,6
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 1);

    #test addition_10
        s21_decimal value_2 = {{6, 0, 0, 0x80010000}};  // -0,6
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);

    #test addition_11
        s21_decimal value_2 = {{6, 0, 0, 0x80010000}};  // -0,6
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFE);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0);

    #test addition_12
        s21_decimal value_2 = {{6, 0, 0, 0x00010000}};  // 0,6
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFE);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test addition_13
        s21_decimal value_2 = {{4, 0, 0, 0x00010000}};  // 0,4
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);
    
    #test addition_14
        s21_decimal value_2 = {{4, 0, 0, 0x80010000}};  // -0,4
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test addition_15
        s21_decimal value_2 = {{45, 0, 0, 0x80020000}};  // -0,45
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test addition_16
        s21_decimal value_2 = {{1, 0, 0, 0x80000000}};  // -1
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);

    #test addition_17
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);
    
    #test addition_18
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 1);

    #test addition_19
        s21_decimal value_2 = {{6, 0, 0, 0x80010000}};  // -0,6
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFE);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x00000000);

    #test addition_20
        s21_decimal value_2 = {{46, 0, 0, 0x80020000}};  // -0,46
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x00000000);

    #test addition_21
        s21_decimal value_2 = {{46, 0, 0, 0x00020000}};  // 0,46
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_add(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);


#suite subtraction
    #test subtraction_01
        s21_decimal value_1 = {{0, 0, 0, 0x80000000}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result), x = 0;
        s21_from_decimal_to_int(result, &x);
        ck_assert_int_eq(x, 0);
        ck_assert_int_eq(return_value, 0);

    #test subtraction_02
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(
            result.bits[0] + result.bits[1] + result.bits[2] + result.bits[3], 0);
        ck_assert_int_eq(return_value, 0);

    #test subtraction_03
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_1 = {{1, 1, 1, 0}};
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        for (int i = 0; i < 3; i++) ck_assert_int_eq(result.bits[i], 0xFFFFFFFF - 1);

    #test subtraction_04
        s21_decimal value_1 = {0};
        s21_decimal value_2 = {0};
        s21_decimal result = {0};
        int x = 10, y = 2147483638, result_int = 0;
        s21_from_int_to_decimal(x, &value_1);
        s21_from_int_to_decimal(y, &value_2);
        int return_value = s21_sub(value_1, value_2, &result);
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result_int, -2147483628);

    #test subtraction_05
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(result.bits[0] + result.bits[1] + result.bits[2], 0);
        ck_assert_int_eq(return_value, 0);

    #test subtraction_06
        s21_decimal value_1 = {{22, 0, 0, 65536}};
        s21_decimal value_2 = {{2, 0, 0, 0}};
        s21_decimal result = {0};
        s21_decimal exp = {{2, 0, 0, 65536}};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(s21_is_equal(result, exp), 1);
        ck_assert_int_eq(return_value, 0);

    #test subtraction_07
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);
    
    #test subtraction_08
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0);
        ck_assert_int_eq(result.bits[1], 0);
        ck_assert_int_eq(result.bits[2], 0);
        ck_assert_int_eq(result.bits[3], 0);
    
    #test subtraction_09
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0);
        ck_assert_int_eq(result.bits[1], 0);
        ck_assert_int_eq(result.bits[2], 0);
        ck_assert_int_eq(result.bits[3], 0);
    
    #test subtraction_10
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{6, 0, 0, 0x80010000}}; // -0.6
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFE);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test subtraction_11
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{6, 0, 0, 0x00010000}}; // 0.6
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);

    #test subtraction_12
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{46, 0, 0, 0x80020000}}; // -0.46
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test subtraction_13
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{46, 0, 0, 0x00020000}}; // 0,46
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test subtraction_14
        s21_decimal value_1 = {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,334
        s21_decimal value_2 = {{46, 0, 0, 0x00020000}}; // 0,46
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFE);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test subtraction_15
        s21_decimal value_1 = {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,334
        s21_decimal value_2 = {{56, 0, 0, 0x00020000}}; // 0,56
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x80000000);

    #test subtraction_16
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}}; // -79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{56, 0, 0, 0x00020000}}; // 0,56
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 2);

    #test subtraction_17
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,335
        s21_decimal value_2 = {{56, 0, 0, 0x80020000}}; // 0,56
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 1);

    #test subtraction_18
        s21_decimal value_1 = {{0xFFFFFFFE, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000}}; // 79,228,162,514,264,337,593,543,950,334
        s21_decimal value_2 = {{56, 0, 0, 0x80020000}}; // 0,56
        s21_decimal result = {0};
        int return_value = s21_sub(value_1, value_2, &result);
        ck_assert_int_eq(return_value, 0);
        ck_assert_int_eq(result.bits[0], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[1], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[2], 0xFFFFFFFF);
        ck_assert_int_eq(result.bits[3], 0x00000000);


#suite multiplication
    #test multiplication_01
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_1 = {0};
        s21_decimal result = {0};
        int return_value = s21_mul(value_2, value_1, &result), result_int = 0;
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_msg(result_int == 0, "Multiplication failed: expected 0, got %d", result_int);

    #test multiplication_02
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal result = {0};
        int return_value = s21_mul(value_2, value_1, &result);
        ck_assert_msg(return_value == 1, "Multiplication failed: return value=%d", return_value);

    #test multiplication_03
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal result = {0};
        int return_value = s21_mul(value_2, value_1, &result);
        ck_assert_msg(return_value == 2, "Multiplication failed: return value=%d", return_value);

    #test multiplication_04
        int int_value_2 = -129;
        int int_value_1 = 921;
        s21_decimal value_1, value_2, result;
        s21_from_int_to_decimal(int_value_1, &value_1);
        s21_from_int_to_decimal(int_value_2, &value_2);
        int expected_result = int_value_1 * int_value_2;
        int return_value = s21_mul(value_2, value_1, &result);
        int result_int = 0;
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(result_int == expected_result, "Multiplication failed: expected %d, got %d", expected_result, result_int);

    #test multiplication_05
        int int_value_2 = 12349;
        int int_value_1 = 94321;
        s21_decimal value_1, value_2, result;
        s21_from_int_to_decimal(int_value_1, &value_1);
        s21_from_int_to_decimal(int_value_2, &value_2);
        int expected_result = int_value_1 * int_value_2;
        int return_value = s21_mul(value_2, value_1, &result);
        int result_int = 0;
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(result_int == expected_result, "Multiplication failed: expected %d, got %d", expected_result, result_int);

    #test multiplication_06
        int int_value_2 = -1289;
        int int_value_1 = -9821;
        s21_decimal value_1, value_2, result;
        s21_from_int_to_decimal(int_value_1, &value_1);
        s21_from_int_to_decimal(int_value_2, &value_2);
        int expected_result = int_value_1 * int_value_2;
        int return_value = s21_mul(value_2, value_1, &result);
        int result_int = 0;
        s21_from_decimal_to_int(result, &result_int);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(result_int == expected_result, "Multiplication failed: expected %d, got %d", expected_result, result_int);

    #test multiplication_07
        float f_value_1 = 20.5;
        float f_value_2 = 30.0;
        s21_decimal value_1, value_2, result_dec;
        s21_from_float_to_decimal(f_value_1, &value_1);
        s21_from_float_to_decimal(f_value_2, &value_2);
        float expected_result = f_value_1 * f_value_2;
        int return_value = s21_mul(value_1, value_2, &result_dec);
        float result = 0.0;
        s21_from_decimal_to_float(result_dec, &result);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(fabs(result - expected_result) <= 1e-6, "Multiplication failed: expected %.6f, got %.6f", expected_result, result);

    #test multiplication_08
        float f_value_1 = -0.5;
        float f_value_2 = 4.0;
        s21_decimal value_1, value_2, result_dec;
        s21_from_float_to_decimal(f_value_1, &value_1);
        s21_from_float_to_decimal(f_value_2, &value_2);
        float expected_result = f_value_1 * f_value_2;
        int return_value = s21_mul(value_1, value_2, &result_dec);
        float result = 0.0;
        s21_from_decimal_to_float(result_dec, &result);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(fabs(result - expected_result) <= 1e-6, "Multiplication failed: expected %.6f, got %.6f", expected_result, result);

    #test multiplication_09
        float f_value_1 = 0.0;
        float f_value_2 = 10.0;
        s21_decimal value_1, value_2, result_dec;
        s21_from_float_to_decimal(f_value_1, &value_1);
        s21_from_float_to_decimal(f_value_2, &value_2);
        float expected_result = f_value_1 * f_value_2;
        int return_value = s21_mul(value_1, value_2, &result_dec);
        float result = 0.0;
        s21_from_decimal_to_float(result_dec, &result);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(fabs(result - expected_result) <= 1e-6, "Multiplication failed: expected %.6f, got %.6f", expected_result, result);

    #test multiplication_10
        float f_value_1 = 2.5;
        float f_value_2 = 3.0;
        s21_decimal value_1, value_2, result_dec;
        s21_from_float_to_decimal(f_value_1, &value_1);
        s21_from_float_to_decimal(f_value_2, &value_2);
        float expected_result = f_value_1 * f_value_2;
        int return_value = s21_mul(value_1, value_2, &result_dec);
        float result = 0.0;
        s21_from_decimal_to_float(result_dec, &result);
        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
        ck_assert_msg(fabs(result - expected_result) <= 1e-6, "Multiplication failed: expected %.6f, got %.6f", expected_result, result);

//    #test multiplication_11
//        float f_value_1 = 25;
//        float f_value_2 = 30;
//        s21_decimal value_1, value_2, result_dec;
//        s21_from_float_to_decimal(f_value_1, &value_1);
//        s21_from_float_to_decimal(f_value_2, &value_2);
//        float expected_result = f_value_1 * f_value_2;
//        int return_value = s21_mul(value_1, value_2, &result_dec);
//        float result = 0.0;
//        s21_from_decimal_to_float(result_dec, &result);
//        ck_assert_msg(return_value == 0, "Multiplication failed: return value=%d", return_value);
//        ck_assert_msg(fabs(result - expected_result) <= 1e-6, "Multiplication failed: expected %.6f, got %.6f", expected_result, result);


#suite division
    #test division_01
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_1 = {0};
        s21_decimal result = {0};
        int return_value = s21_div(value_2, value_1, &result);
        ck_assert_int_eq(return_value, 3);

    #test division_02
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {0};
        s21_decimal result = {0};
        int return_value = s21_div(value_2, value_1, &result);
        ck_assert_int_eq(return_value, 0);



#suite less_than
    #test less_than_01
        s21_decimal value_1 = {{123457u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test less_than_02
        s21_decimal value_1 = {{123457u, 654u, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_03
        s21_decimal value_1 = {{12345, 654, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{12, 654, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test less_than_04
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test less_than_05
        s21_decimal value_1 = {{123456, 6, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123, 6, 0xFFFFFFFF, 0x80000000}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_06
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 3454334633}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_07
        s21_decimal value_1 = {{123456, 6, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123456, 6, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less(value_1, value_2);
        ck_assert_int_eq(return_value, 1);


#suite less_than_or_equal_to
    #test less_than_or_equal_to_01
        s21_decimal value_1 = {{123457u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test less_than_or_equal_to_02
        s21_decimal value_1 = {{123457u, 654u, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_03
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123457u, 654u, 0xFFFFFFFF, 0x80000000}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test less_than_or_equal_to_04
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0x80000000}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_05
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123457u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_06
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_07
        s21_decimal value_1 = {{12346, 6, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{12345, 6, 0xFFFFFFFF, 0x80000000}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_08
        s21_decimal value_1 = {{0, 0, 0, 0x80000000}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test less_than_or_equal_to_09
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_less_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);


#suite greater_than

    #test greater_than_01
        s21_decimal value_1 = {{123, 1, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{12, 1, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 1);   

    #test greater_than_02 
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 1, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test greater_than_03
        s21_decimal value_1 = {{12, 1, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{1, 1, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 1);


    #test greater_than_04
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0x80000000}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test greater_than_05
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test greater_than_06
        s21_decimal value_1 = {{123456, 1, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456, 1, 0xFFFFFFFF, 0x10000}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_07
        s21_decimal value_1 = {{234, 0, 0, 0}};
        s21_decimal value_2 = {{2, 0, 0, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_08
        s21_decimal value_1 = {{234, 0, 0, 0x80000000}};
        s21_decimal value_2 = {{2, 0, 0, 0x80000000}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test greater_than_09
        s21_decimal value_1 = {{234, 0, 0, 0x80000000}};
        s21_decimal value_2 = {{2, 0, 0, 0}};
        int return_value = s21_is_greater(value_1, value_2);
        ck_assert_int_eq(return_value, 0);
    

#suite greater_than_or_equal_to
    #test greater_than_or_equal_to_01
        s21_decimal value_1 = {{123457u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_or_equal_to_02
        s21_decimal value_1 = {{123457, 1, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123456, 1, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test greater_than_or_equal_to_03
        s21_decimal value_1 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_or_equal_to_04
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0x80000000}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_or_equal_to_05
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0x80000000}};
        s21_decimal value_2 = {{123457u, 654u, 0xFFFFFFFF, 0x80000000}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_or_equal_to_06
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test greater_than_or_equal_to_07
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 0}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 0x200000}};
        int return_value = s21_is_greater_or_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);


#suite equal_to
    #test equal_to_01
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test equal_to_02
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 1, 0}};
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test equal_to_03
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 80000000}};
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test equal_to_04
        s21_decimal value_1 = {{2, 0, 0, 0}};
        s21_decimal value_2 = {{20, 0, 0, 0x10000}};
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test equal_to_05
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0x80000000}};
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

#suite not_equal_to
    #test not_equal_to_01
        s21_decimal value_1 = {{123456u, 654u, 0xFFFFFFFF, 80000000}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 80000000}};
        int return_value = s21_is_not_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test not_equal_to_02
        s21_decimal value_1 = {{123453u, 654u, 0xFFFFFFFF, 80000000}};
        s21_decimal value_2 = {{123456u, 654u, 0xFFFFFFFF, 80000000}};
        int return_value = s21_is_not_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test not_equal_to_03
        s21_decimal value_1 = {{0, 0, 0, 80000000}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_not_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test not_equal_to_04
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_decimal value_2 = {{0, 0, 0, 0x80000000}};
        int return_value = s21_is_not_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);

    #test not_equal_to_05
        s21_decimal value_1 = {{0, 0, 0, 0x80000000}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        int return_value = s21_is_not_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 0);





#suite from_int_to_decimal
    #test from_int_to_decimal_01
        int src = -2147483647;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_from_int_to_decimal(src, &value_1);
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);

    #test from_int_to_decimal_02
        int src = -0;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{1, 0, 0, 0}};
        s21_from_int_to_decimal(src, &value_1);
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);

    #test from_int_to_decimal_03
        int src = 101;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_from_int_to_decimal(src, &value_1);
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);

    #test from_int_to_decimal_04
        int src = -31325;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_from_int_to_decimal(src, &value_1);
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);


#suite from_decimal_to_int
    #test from_decimal_to_int_01
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 1, 0}};
        return_value = s21_from_decimal_to_int(value_1, &temp);
        ck_assert_int_eq(return_value, 1);

    #test from_decimal_to_int_02
        int src = 0;
        int temp = 100;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);

    #test from_decimal_to_int_03
        int src = 0;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0x80000000, 0, 0, 0}};
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);

    #test from_decimal_to_int_04
        int src = 133;
        int temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0x85, 0, 0, 0}};
        s21_from_decimal_to_int(value_1, &temp);
        return_value = (src == temp);
        ck_assert_int_eq(return_value, 1);


#suite from_float_to_decimal
    #test from_float_to_decimal_01
        float src = 0.0000000;
        s21_decimal value_1 = {{0xffffff, 0xffffff, 0xffffff, 0xffffff}};
        s21_decimal value_2 = {{0, 0, 0, 0}};
        s21_from_float_to_decimal(src, &value_1);
        int return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

    #test from_float_to_decimal_02
        float src = 1.23456789999;
        float temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {0};
        return_value = s21_from_float_to_decimal(src, &value_1);
        s21_from_decimal_to_float(value_1, &temp);
        ck_assert_int_eq(return_value, 0);
        s21_decimal value_2 = {{0x0012d688, 0x00000000, 0x00000000, 0x00060000}}; // 1.234568
        s21_from_decimal_to_float(value_2, &src);

        
        return_value = s21_is_equal(value_1, value_2);
        ck_assert_int_eq(return_value, 1);

        


    #test from_float_to_decimal_03
        float src = 7.92281625143e+30;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        return_value = s21_from_float_to_decimal(src, &value_1);
        ck_assert_int_eq(return_value, 1);

    #test from_float_to_decimal_04
        float src = 1e-29f;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        return_value = s21_from_float_to_decimal(src, &value_1);
        ck_assert_int_eq(return_value, 1);



#suite from_decimal_to_float
    #test from_decimal_to_float_01
        float src = 0.00000000000;
        float temp = 0;
        int return_value = 0;
        s21_decimal value_1 = {{0, 0, 0, 0}};
        s21_from_decimal_to_float(value_1, &temp);
        if (fabs(src - temp) < pow(10, -7)) {
            return_value = 1;
        }
        ck_assert_int_eq(return_value, 1);

    #test from_decimal_to_float_02
        float temp = 0;
        s21_decimal value_1 = {{1, 0, 0, 0x00040000}};
        s21_from_decimal_to_float(value_1, &temp);

    #test from_decimal_to_float_03
        float temp = 0;
        s21_decimal value_1 = {{123, 0, 0, 0x00100000}};
        s21_from_decimal_to_float(value_1, &temp);

    #test from_decimal_to_float_04
        float temp = 0;
        s21_decimal value_1 = {{1, 0, 0, 0x80040000}};
        s21_from_decimal_to_float(value_1, &temp);





#suite floor
    #test floor_01
        ck_assert_int_eq(0, 0);

#suite round
    #test round_01
        ck_assert_int_eq(0, 0);

#suite truncate
    #test truncate_01
        ck_assert_int_eq(0, 0);

#suite negate
    #test negate_01
        ck_assert_int_eq(0, 0);





#suite addition_more_tests
    #test addition_more_tests_01
        ck_assert_int_eq(0, 0);

#suite subtraction_more_tests
    #test subtraction_more_tests_01
        ck_assert_int_eq(0, 0);

#suite multiplication_more_tests
    #test multiplication_more_tests_01
        ck_assert_int_eq(0, 0);

#suite division_more_tests
    #test division_more_tests_01
        ck_assert_int_eq(0, 0);



#suite less_than_more_tests
    #test less_than_more_tests_01
        ck_assert_int_eq(0, 0);

#suite less_than_or_equal_to_more_tests
    #test less_than_or_equal_to_more_tests_01
        ck_assert_int_eq(0, 0);

#suite greater_than_more_tests
    #test greater_than_more_tests_01
        ck_assert_int_eq(0, 0);

#suite greater_than_or_equal_to_more_tests
    #test greater_than_or_equal_to_more_tests_01
        ck_assert_int_eq(0, 0);

#suite equal_to_more_tests
    #test equal_to_more_tests_01
        ck_assert_int_eq(0, 0);

#suite not_equal_to_more_tests
    #test not_equal_to_more_tests_01
    ck_assert_int_eq(0, 0);



#suite from_int_to_decimal_more_tests
    #test from_int_to_decimal_more_tests_01
    ck_assert_int_eq(0, 0);

#suite from_decimal_to_int_more_tests
    #test from_decimal_to_int_more_tests_01
    ck_assert_int_eq(0, 0);


#suite from_float_to_decimal_more_tests
    #test from_float_to_decimal_more_tests_001
    
        float inp = 1. / 0.;
        s21_decimal out;
        int error = s21_from_float_to_decimal(inp, &out);
        for (int i = 0; i < 4; i++) ck_assert_int_eq(out.bits[i], 0);
        ck_assert_int_eq(error, 1);



    #test from_float_to_decimal_more_tests_002
        float inp = 2;
        s21_decimal *out = NULL;
        int error = s21_from_float_to_decimal(inp, out);
        ck_assert_ptr_eq(out, NULL);
        ck_assert_int_eq(error, 1);

    #test from_float_to_decimal_more_tests_003
        float inp = 2;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000002, 0, 0, 0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);



    #test from_float_to_decimal_more_tests_004
        float inp = -321.2;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000C8C, 0, 0, 0x80010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_005
        float inp = 321.2;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000C8C, 0, 0, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_006
        //float inp = 321213143.8323;
        float inp = 321213143.8323;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x13255310, 0, 0, 0}};
        int return_value = s21_is_equal(res, out);

        

        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);


        #test from_float_to_decimal_more_tests_005_plus
        float inp = 2.5001;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x000061A9, 0, 0, 0x00040000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_006_plus
        float inp = 1.5000001;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0000000F, 0, 0, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_007_plus
        float inp = 2.5;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000019, 0, 0, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_009_plus
        float inp = 1.5;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0000000F, 0, 0, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_010_plus
        float inp = 1111111.5000001;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F448, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_011_plus
        float inp = 1111112.5000001;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F448, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_012_plus
        float inp = 1111111.500000;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F448, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_013_plus
        float inp = 1111112.500000;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F448, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_014_plus
        float inp = 1111113.500000;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F44A, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

        #test from_float_to_decimal_more_tests_015_plus
        float inp = 1111114.500000;
        s21_decimal out = {{0, 0, 0, 0}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0010F44A, 0x0, 0x0, 0x0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);







    #test from_float_to_decimal_more_tests_007
        float inp = 9732131234575756436473.323123474;
        s21_decimal out = {{3211, 123145, 231, 312441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0xC7238000, 0x9472ED75, 0x0000020F, 0}};
        int return_value = s21_is_equal(res, out);

        

        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_008
        float inp = 73.329959999;
        s21_decimal out = {{3211, 123145, 231, 312441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x006FE484, 0, 0, 0x00050000}};
        int return_value = s21_is_equal(res, out);



        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);


    #test from_float_to_decimal_more_tests_009
        float inp = 0.003;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000003, 0, 0, 0x00030000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_010
        float inp = 0.00312345;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0004C419, 0, 0, 0x00080000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_011
        float inp = 0.00000003123959595945;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0004C44C, 0, 0, 0x000D0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_012
        float inp = 0.0000000000000000093929383838292;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x008F532B, 0, 0, 0x00180000}};
        int return_value = s21_is_equal(res, out);

        printf("\tmistake - %f\n", inp);
        printf("error - %d | return_value - %d|\n", error, return_value);
        printf("res - ");
        for (int i = 0; i <= 3; i++) {
            printf("%08x ", res.bits[i]);
        }
        puts("");

        printf("out - ");
        for (int i = 0; i <= 3; i++) {
            printf("%08x ", out.bits[i]);
        }
        puts("");

        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);


    #test from_float_to_decimal_more_tests_013
        float inp = 0.00000000000000000000000000013929383838292;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000001, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);

        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_014
        float inp = 0.00000000000000000000000000016929383838292;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000002, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_015
        float inp = .00000000000000000000000000000000193929383838292;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        ck_assert_int_eq(error, 1);

    #test from_float_to_decimal_more_tests_016
        float inp = 2183182381923912939123.365656f;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x8ADB0000, 0x59BC8E01, 0x00000076, 0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_017
        float inp = 79215000000000000000000000000.365656;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0xCF000000, 0xAC05AE5D, 0xFFF51CBA, 0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_018
        float inp = 7015000000000000000000000000.365656;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0xC7000000, 0xFFD18396, 0x16AAAC07, 0}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_019
        float inp = 0.00000000000000000000000005646473736464;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000235, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_020
        float inp = 0.00000000000000000000000073736361612636;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00001CCE, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_021
        float inp = 0.00000000000000000000000858598287381972;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0000218A, 0, 0, 0x001B0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_022
        float inp = 0.000000000000000000000099999999999;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00000001, 0, 0, 0x00160000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_023
        float inp = 0.00000000000000000000073766666662636;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00708F1B, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_024
        float inp = 0.0000000000000000000073736361612636;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00708344, 0, 0, 0x001B0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_025
        float inp = 0.00000000000000000000000073736361612636;
        s21_decimal out = {{32131, 1231435, 2311, 3121441}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00001CCE, 0, 0, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_026
        float inp = -1.307818E+07;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00C78EA4, 0x00000000, 0x00000000, 0x80000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_027
        float inp = -30914.76;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x002F2C14, 0x00000000, 0x00000000, 0x80020000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_028
        float inp = 1.965111E-26;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x000000C5, 0x00000000, 0x00000000, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_029
        float inp = -750.9904;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00729790, 0x00000000, 0x00000000, 0x80040000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_030
        float inp = 72932.2;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x000B20EA, 0x00000000, 0x00000000, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_031
        float inp = 7.526432E-06;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0072D820, 0x00000000, 0x00000000, 0x000C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_032
        float inp = -1.391184E+17;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x9DB88000, 0x01EE3F72, 0x00000000, 0x80000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_033
        float inp = 3.693497E-09;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x00385BB9, 0x00000000, 0x00000000, 0x000F0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_034
        float inp = 351871.4;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0035B0FA, 0x00000000, 0x00000000, 0x00010000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_035
        float inp = 0.1175977;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0011F1A9, 0x00000000, 0x00000000, 0x00070000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_036
        float inp = -2.013319E-14;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x001EB887, 0x00000000, 0x00000000, 0x80140000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_037
        float inp = -280.7036;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x002AD4FC, 0x00000000, 0x00000000, 0x80040000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_038
        float inp = -3.196059E+18;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x2030B000, 0x2C5AAEBA, 0x00000000, 0x80000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_039
        float inp = -1.38892E+14;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x50527800, 0x00007E52, 0x00000000, 0x80000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_040
        float inp = 6.068951E+09;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x69BCD7D8, 0x00000001, 0x00000000, 0x00000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_041
        float inp = -1.190043E+24;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0xF98C0000, 0x5C3C75F5, 0x0000FC00, 0x80000000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_042
        float inp = 4.511203E-27;
        s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
        int error = s21_from_float_to_decimal(inp, &out);
        s21_decimal res = {{0x0000002D, 0x00000000, 0x00000000, 0x001C0000}};
        int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
        ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_043
  float inp = -7.442655E+23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x1B360000, 0xB6AE8261, 0x00009D9A, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_044
  float inp = 8.763741E+26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x8CD00000, 0x28107A63, 0x02D4EB6F, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_045
  float inp = -5.447201E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000005, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_046
  float inp = 1.333345E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x6F8D0680, 0x00000C20, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_047
  float inp = -3.85058E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0005E022, 0x00000000, 0x00000000, 0x800B0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_048
  float inp = 1.325723E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00143A9B, 0x00000000, 0x00000000, 0x000F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_049
  float inp = -5.831514E+23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x30840000, 0xB3639777, 0x00007B7C, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_050
  float inp = -1.337444E-22;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00146864, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_051
  float inp = 1.230342E+28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xAD800000, 0xA66BA8BD, 0x27C12686, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_052
  float inp = -8.335803E-07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x007F31BB, 0x00000000, 0x00000000, 0x800D0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_053
  float inp = 9.196544E-25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000023ED, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_054
  float inp = 2.922531E+25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x9AB80000, 0x3ACC2F60, 0x00182CB3, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_055
  float inp = 1.581408E+19;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x319C0000, 0xDB76E5F9, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_056
  float inp = -3.22218E-27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000020, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_057
  float inp = 1.290434E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0013B0C2, 0x00000000, 0x00000000, 0x000F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_058
  float inp = -1.162378E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0011BC8A, 0x00000000, 0x00000000, 0x801A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_059
  float inp = -1.609435E+11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x78FAEAE0, 0x00000025, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_060
  float inp = -2.747507E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0029EC73, 0x00000000, 0x00000000, 0x800C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_061
  float inp = -2.233666E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000002, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_062
  float inp = -9.564972E-05;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0091F32C, 0x00000000, 0x00000000, 0x800B0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_063
  float inp = 6.76729E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000A5379, 0x00000000, 0x00000000, 0x00100000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_064
  float inp = -1.56421E+08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0952CB88, 0x00000000, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_065
  float inp = 1.248784E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00130E10, 0x00000000, 0x00000000, 0x00110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_066
  float inp = 3.830389E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000004, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_067
  float inp = -7.518575E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x8BEBC180, 0x00004461, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_068
  float inp = 1.759471E+20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0821C000, 0x89C1AB3E, 0x00000009, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_069
  float inp = -1.730171E+16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x468E8C00, 0x003D77D0, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_070
  float inp = -0.005833615;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0059038F, 0x00000000, 0x00000000, 0x80090000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_071
  float inp = -1.083782E+27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x27C00000, 0xF1EDC3B6, 0x03807BC3, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_072
  float inp = -2.543952E+11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x3B22B200, 0x0000003B, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_073
  float inp = 8.122079E+09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE41D1718, 0x00000001, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_074
  float inp = -1.381688E-13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00151538, 0x00000000, 0x00000000, 0x80130000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_075
  float inp = 5.3419E+17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x8890E000, 0x0769D2F9, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_076
  float inp = -1.899235E+25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xD8B80000, 0x5B459112, 0x000FB5C9, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_077
  float inp = 0.01434358;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0015E2F6, 0x00000000, 0x00000000, 0x00080000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_078
  float inp = -8.395913E+08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x320B2584, 0x00000000, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_079
  float inp = 2.963941E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002D39E5, 0x00000000, 0x00000000, 0x000F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_080
  float inp = -4.554593E-25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000011CB, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_081
  float inp = 1.511913E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001711E9, 0x00000000, 0x00000000, 0x001A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_082
  float inp = 12.18852;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00129924, 0x00000000, 0x00000000, 0x00050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_083
  float inp = 8.216155E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x007D5E5B, 0x00000000, 0x00000000, 0x00110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_084
  float inp = -0.7325138;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x006FC5D2, 0x00000000, 0x00000000, 0x80070000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_085
  float inp = 49394.41;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x004B5EB1, 0x00000000, 0x00000000, 0x00020000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_086
  float inp = 0.0002621874;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002801B2, 0x00000000, 0x00000000, 0x000A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_087
  float inp = 5.880856E+15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x7CDAF000, 0x0014E49B, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_088
  float inp = -7.048725E-24;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00011357, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_089
  float inp = 1.661392E-16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001959D0, 0x00000000, 0x00000000, 0x00160000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_090
  float inp = -3.749618E-17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003936F2, 0x00000000, 0x00000000, 0x80170000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_091
  float inp = -1.078071E+10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x82949470, 0x00000002, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_092
  float inp = -942.165;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000E6055, 0x00000000, 0x00000000, 0x80030000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_093
  float inp = 8.128622E+24;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0CF80000, 0x7B4932DD, 0x0006B94D, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_094
  float inp = 3.478075E-10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0035123B, 0x00000000, 0x00000000, 0x00100000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_095
  float inp = -0.2220105;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0021E049, 0x00000000, 0x00000000, 0x80070000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_096
  float inp = -4.057507E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003DE9A3, 0x00000000, 0x00000000, 0x80110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_097
  float inp = -7.703651E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x75D03380, 0x00004610, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_098
  float inp = 4.329224E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00420F08, 0x00000000, 0x00000000, 0x000F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_099
  float inp = -3.238849E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00316BC1, 0x00000000, 0x00000000, 0x800C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_100
  float inp = -5.937755E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x005A9A5B, 0x00000000, 0x00000000, 0x80180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_101
  float inp = 9.214601E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x008C9A89, 0x00000000, 0x00000000, 0x000F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_102
  float inp = -2.788572E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x80595C00, 0x0000FD9E, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_103
  float inp = -0.2386963;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00246C13, 0x00000000, 0x00000000, 0x80070000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_104
  float inp = -4.803305E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00494AE9, 0x00000000, 0x00000000, 0x801A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_105
  float inp = -6.715998E+27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xFEC00000, 0x19B4CE7F, 0x15B357E5, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_106
  float inp = 1.001074E+27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE3400000, 0x47EB885C, 0x033C11AA, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_107
  float inp = 1.061498E+12;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x26361280, 0x000000F7, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_108
  float inp = -5.398762E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF8E99100, 0x00003119, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_109
  float inp = 2.011937E-05;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001EB321, 0x00000000, 0x00000000, 0x000B0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_110
  float inp = 1.208047E+28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE9C00000, 0xEEAB1663, 0x2708BB06, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_111
  float inp = -3.577309;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003695DD, 0x00000000, 0x00000000, 0x80060000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_112
  float inp = -0.01349936;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00149930, 0x00000000, 0x00000000, 0x80080000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_113
  float inp = 2.636795E+21;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x4E1F8000, 0xF0E1AA29, 0x0000008E, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_114
  float inp = 1.886762E+28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xBE800000, 0xAE79E847, 0x3CF6EDF1, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_115
  float inp = 1.137225E+20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xED5C4000, 0x2A377B38, 0x00000006, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_116
  float inp = 2.033605E-23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00031A61, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_117
  float inp = -3.082871E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xAF159700, 0x00011862, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_118
  float inp = -4.087111E-10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003E5D47, 0x00000000, 0x00000000, 0x80100000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_119
  float inp = -1.082272E+23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x14400000, 0x021DDBB8, 0x000016EB, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_120
  float inp = -9.243464E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x008D0B48, 0x00000000, 0x00000000, 0x801A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_121
  float inp = -1.351883E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0014A0CB, 0x00000000, 0x00000000, 0x80110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_122
  float inp = 1.067036E+22;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x811C0000, 0x70FDEE02, 0x00000242, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_123
  float inp = -1.655359E-07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0019423F, 0x00000000, 0x00000000, 0x800D0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_124
  float inp = -2.818527E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002B01DF, 0x00000000, 0x00000000, 0x800F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_125
  float inp = 2.024663E-23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000316E2, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_126
  float inp = 2.310628E-10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002341E4, 0x00000000, 0x00000000, 0x00100000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_127
  float inp = 2968.287;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002D4ADF, 0x00000000, 0x00000000, 0x00030000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_128
  float inp = 1.229755E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0012C3BB, 0x00000000, 0x00000000, 0x00180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_129
  float inp = 1.059234E-14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001029A2, 0x00000000, 0x00000000, 0x00140000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_130
  float inp = -64208.49;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0061F971, 0x00000000, 0x00000000, 0x80020000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_131
  float inp = 2.186795E+15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE32BEE00, 0x0007C4E0, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_132
  float inp = -2.191804E+07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x014E7158, 0x00000000, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_133
  float inp = 6.5419E-24;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0000FF8B, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_134
  float inp = -1.152604E+26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF9C00000, 0xCDD8046A, 0x005F5756, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_135
  float inp = 6.767653E+21;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0AB08000, 0xE00D62F0, 0x0000016E, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_136
  float inp = -4.926002E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x6BEFF200, 0x0001C004, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_137
  float inp = 1.194919E+26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x4F700000, 0xE0F3DC90, 0x0062D764, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_138
  float inp = 0.2616035;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0027EAE3, 0x00000000, 0x00000000, 0x00070000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_139
  float inp = -2.989957E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x893FB080, 0x00001B31, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_140
  float inp = -4.61851E-24;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0000B469, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_141
  float inp = -0.003898347;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003B7BEB, 0x00000000, 0x00000000, 0x80090000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_142
  float inp = 11.08692;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0010EAD4, 0x00000000, 0x00000000, 0x00050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_143
  float inp = -0.003970314;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003C950A, 0x00000000, 0x00000000, 0x80090000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_144
  float inp = 1.054338E-15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00101682, 0x00000000, 0x00000000, 0x00150000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_145
  float inp = -32.53767;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0031A607, 0x00000000, 0x00000000, 0x80050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_146
  float inp = 0.06596097;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0064A601, 0x00000000, 0x00000000, 0x00080000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_147
  float inp = 8.861377E+25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE7E80000, 0x18E914DA, 0x00494CB2, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_148
  float inp = 2.324943E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000002, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_149
  float inp = 3191.227;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0030B1BB, 0x00000000, 0x00000000, 0x00030000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_150
  float inp = 0.938446;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000E51CE, 0x00000000, 0x00000000, 0x00060000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_151
  float inp = -3.894784E-17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003B6E00, 0x00000000, 0x00000000, 0x80170000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_152
  float inp = 7.679175E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xB9CDE700, 0x0002BA6A, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_153
  float inp = 9.389545E+08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x37F74F04, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_154
  float inp = -8.570058E+07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x051BAFE4, 0x00000000, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_155
  float inp = 1.069406E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0010515E, 0x00000000, 0x00000000, 0x001A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_156
  float inp = 1963320;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001DF538, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_157
  float inp = 1631.409;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0018E4B1, 0x00000000, 0x00000000, 0x00030000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_158
  float inp = -9.583782E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00923CA6, 0x00000000, 0x00000000, 0x800F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_159
  float inp = 4.934571E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xEF284B00, 0x0001C0CB, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_160
  float inp = 10.23795;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000F9F33, 0x00000000, 0x00000000, 0x00050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_161
  float inp = -703088.8;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x006B4868, 0x00000000, 0x00000000, 0x80010000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_162
  float inp = -1.061253E+17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE82E8800, 0x01790865, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);
    
    #test from_float_to_decimal_more_tests_163
  float inp = 0.0001655871;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0019443F, 0x00000000, 0x00000000, 0x000A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_164
  float inp = -158.45;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00003DE5, 0x00000000, 0x00000000, 0x80020000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_165
  float inp = 2.961945E+11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF69165A0, 0x00000044, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_166
  float inp = -1.617612E-26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000000A2, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_167
  float inp = -212.0078;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0020598E, 0x00000000, 0x00000000, 0x80040000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_168
  float inp = 1.683534E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0019B04E, 0x00000000, 0x00000000, 0x001A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_169
  float inp = 1.360221E+25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x01480000, 0x4818EABE, 0x000B4061, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_170
  float inp = 4.304772E-15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0041AF84, 0x00000000, 0x00000000, 0x00150000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_171
  float inp = 2.341019E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x18973B00, 0x0000D4EA, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_172
  float inp = 2.241625E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00223459, 0x00000000, 0x00000000, 0x000C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_173
  float inp = -1.303562E-27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0000000D, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_174
  float inp = 3.300137E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000003, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_175
  float inp = -6.89053E+23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xD4540000, 0xA35284BD, 0x000091E9, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_176
  float inp = -1.335107E-17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00145F43, 0x00000000, 0x00000000, 0x80170000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_177
  float inp = 4.299471E+28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xA1C00000, 0x5E84AF70, 0x8AEC63FB, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_178
  float inp = 5.439797E-13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00530135, 0x00000000, 0x00000000, 0x00130000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_179
  float inp = 9283997;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x008DA99D, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_180
  float inp = -5.917783E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x005A4C57, 0x00000000, 0x00000000, 0x801A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_181
  float inp = -4.605351E-08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x004645A7, 0x00000000, 0x00000000, 0x800E0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_182
  float inp = 3.67147E-07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00059A2B, 0x00000000, 0x00000000, 0x000C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_183
  float inp = 7.805752E-14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00771B38, 0x00000000, 0x00000000, 0x00140000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_184
  float inp = -4.665166E-28;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000005, 0x00000000, 0x00000000, 0x801C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_185
  float inp = 1.029686E+16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x8A9A1800, 0x002494F0, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_186
  float inp = -1.623241E+11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xCB4533A0, 0x00000025, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_187
  float inp = 0.01401084;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001560FC, 0x00000000, 0x00000000, 0x00080000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_188
  float inp = 16.07887;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001888CF, 0x00000000, 0x00000000, 0x00050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_189
  float inp = -2.094895E+21;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x45F18000, 0x90821F45, 0x00000071, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_190
  float inp = -4.274481E-16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00413931, 0x00000000, 0x00000000, 0x80160000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_191
  float inp = 7.869093E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x994C0500, 0x0002CBB0, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_192
  float inp = -1.272028E-09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001368DC, 0x00000000, 0x00000000, 0x800F0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_193
  float inp = -5.217951E-12;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x004F9E9F, 0x00000000, 0x00000000, 0x80120000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_194
  float inp = -386648.3;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x003AFF73, 0x00000000, 0x00000000, 0x80010000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_195
  float inp = 3.61813E+09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xD7A84850, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_196
  float inp = -109.3412;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0010AF24, 0x00000000, 0x00000000, 0x80040000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_197
  float inp = 4.581238E+18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x45856000, 0x3F93D3B0, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_198
  float inp = -6.603116E-17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0064C16C, 0x00000000, 0x00000000, 0x80170000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_199
  float inp = -1.320119E+10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x12DA2C70, 0x00000003, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_200
  float inp = 2.82232E-12;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00044E78, 0x00000000, 0x00000000, 0x00110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_201
  float inp = -1.841507E+09;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x6DC32AB8, 0x00000000, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_202
  float inp = -2.262675E-19;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00228693, 0x00000000, 0x00000000, 0x80190000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_203
  float inp = 2.464824E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00259C38, 0x00000000, 0x00000000, 0x001A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_204
  float inp = 1.511738E-07;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0017113A, 0x00000000, 0x00000000, 0x000D0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_205
  float inp = 1.720869E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001A4225, 0x00000000, 0x00000000, 0x000C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_206
  float inp = 8.188374E-27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000052, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_207
  float inp = -10.51995;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00100D5B, 0x00000000, 0x00000000, 0x80050000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_208
  float inp = 1.603923E+24;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x896C0000, 0xD70DD7BD, 0x000153A4, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_209
  float inp = 119471.1;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00123AD7, 0x00000000, 0x00000000, 0x00010000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_210
  float inp = 6.965003E+25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x44F80000, 0xB125DD81, 0x00399CF7, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_211
  float inp = 1.296483E+17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x233BB800, 0x01CC9A71, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_212
  float inp = -5.872053E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF054E880, 0x00003567, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_213
  float inp = -1.481293E+23;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x26820000, 0x1AFE5755, 0x00001F5E, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_214
  float inp = -2.851002E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002B80BA, 0x00000000, 0x00000000, 0x80180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_215
  float inp = 112195.3;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00111EA1, 0x00000000, 0x00000000, 0x00010000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_216
  float inp = 1.039634E+08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x06325B08, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_217
  float inp = 3.40683E+13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x24EB6B00, 0x00001EFC, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_218
  float inp = 6.772869E+11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xB171F120, 0x0000009D, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_219
  float inp = -1.268637E+15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x91BBE200, 0x000481D1, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_220
  float inp = -0.001798262;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001B7076, 0x00000000, 0x00000000, 0x80090000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_221
  float inp = -3.38201E-15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00052919, 0x00000000, 0x00000000, 0x80140000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_222
  float inp = -3.263142E-13;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0031CAA6, 0x00000000, 0x00000000, 0x80130000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_223
  float inp = 1.231812E-27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0000000C, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_224
  float inp = 3.812988E+22;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xCF7C0000, 0x06623F3C, 0x00000813, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_225
  float inp = 3.308621E+16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x92039400, 0x00758BBB, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_226
  float inp = -1.322553E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00142E39, 0x00000000, 0x00000000, 0x801A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_227
  float inp = 1.148738E+08;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x06D8D5C8, 0x00000000, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_228
  float inp = -1.991151E+10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xA2D187F0, 0x00000004, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_229
  float inp = 884496.5;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0086F6A5, 0x00000000, 0x00000000, 0x00010000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_230
  float inp = 4.103006E-27;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000029, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_231
  float inp = 4.647867E-26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000001D1, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_232
  float inp = 9.713084E+17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF55A6000, 0x0D7AC7D7, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_233
  float inp = -2.557154E+19;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x6BB14000, 0x62E05C25, 0x00000001, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_234
  float inp = -0.6512141;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00635E0D, 0x00000000, 0x00000000, 0x80070000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_235
  float inp = 3.490169E+16;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xF282C400, 0x007BFEE6, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_236
  float inp = 5.061718E-20;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x004D3C56, 0x00000000, 0x00000000, 0x001A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_237
  float inp = 6.59684E+22;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xEEE80000, 0x27750C6F, 0x00000DF8, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_238
  float inp = -1.918654E-19;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x001D46BE, 0x00000000, 0x00000000, 0x80190000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_239
  float inp = -1.215304E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00128B48, 0x00000000, 0x00000000, 0x80180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_240
  float inp = -3.20701E-15;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x0004E4BD, 0x00000000, 0x00000000, 0x80140000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_241
  float inp = -2.55141E+17;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x40A35000, 0x038A7163, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_242
  float inp = -1.751754E+22;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x684A0000, 0xA0B3FA18, 0x000003B5, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_243
  float inp = -1.188452E+26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xD2400000, 0x3393C802, 0x00624E73, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_244
  float inp = 3.866995E-25;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00000F1B, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_245
  float inp = 44301.02;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00439916, 0x00000000, 0x00000000, 0x00020000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_246
  float inp = 2.47909E-26;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x000000F8, 0x00000000, 0x00000000, 0x001C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_247
  float inp = -3.094722E-11;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x002F38C2, 0x00000000, 0x00000000, 0x80110000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_248
  float inp = -0.0001411886;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00158B2E, 0x00000000, 0x00000000, 0x800A0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_249
  float inp = 4.721357E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00480ACD, 0x00000000, 0x00000000, 0x00180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_250
  float inp = -6.247398E+10;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x8BBD4860, 0x0000000E, 0x00000000, 0x80000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_251
  float inp = -1.663049E-18;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00196049, 0x00000000, 0x00000000, 0x80180000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_252
  float inp = 4.894282E+14;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0xE2010A00, 0x0001BD21, 0x00000000, 0x00000000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);

    #test from_float_to_decimal_more_tests_253
  float inp = 7.748195E-06;
  s21_decimal out = {{0x00009D40, 0x0000EB82, 0x00008442, 0x00001472}};
  int error = s21_from_float_to_decimal(inp, &out);
  s21_decimal res = {{0x00763A63, 0x00000000, 0x00000000, 0x000C0000}};
  int return_value = s21_is_equal(res, out);
        ck_assert_int_eq(return_value, 1);
  ck_assert_int_eq(error, 0);




#suite from_decimal_to_float_more_tests
    #test from_decimal_to_float_more_tests_01



#suite floor_more_tests
    #test floor_more_tests_01
        ck_assert_int_eq(0, 0);

#suite round_more_tests
    #test round_more_tests_01
        ck_assert_int_eq(0, 0);

#suite truncate_more_tests
    #test truncate_more_tests_01
        ck_assert_int_eq(0, 0);

#suite negate_more_tests
    #test negate_more_tests_01
        ck_assert_int_eq(0, 0);





















       #main-pre
    srunner_set_fork_status(sr, CK_NOFORK);
    
