#include "s21_test.h"

TEST(MatrixInverseTest, Inverse1) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      4.054658976754389,     -1.750787993767701,   -3.082739417862508,
      -3.9718890164984098,   -2.082330936066458,   1.2978835948444996,
      -0.1844701951465586,   2.0974542333980706,   -3.5161490659072414,
      -0.010090611639653524, 2.0424813263830623,   -4.156784438436696,
      0.40334814630339366,   4.586034682042264,    -0.20987032611254897,
      -2.4893514113873394,   1.3066459815219957,   1.3463760466389036,
      -3.3840469983866353,   4.202579695444907,    3.76284456086095,
      -3.0169515318002693,   -4.147888406843567,   4.782832049756564,
      3.3082454872936022,    -2.4831691390694335,  -4.48916919487735,
      -0.5496789604692562,   4.863697563660008,    4.086096274066694,
      -3.833057390739285,    0.4576922437809916,   -2.380578575451542,
      -3.5689413057953177,   1.7397459484018665,   1.8417019027942727,
      -3.8344470572612046,   3.548143146409867,    -3.2737713762571543,
      4.9120924053607595,    1.8885795995345198,   -7.136133348595308e-05,
      4.577081496338694,     -0.06721240642122073, -4.947718749960734,
      4.216564927917705,     0.8046813433765703,   -3.8222665104714215,
      -1.5460708786824195,   4.941749850077832,    -4.964793415647122,
      4.020123154743292,     3.373123551252089,    4.672582491452614,
      -4.001830098588449,    -3.403274496940808,   3.5591583154059716,
      0.4434344542519444,    -3.375999296287655,   -4.983667248339225,
      -2.0077899420519794,   1.3049223532138123,   3.172891648420247,
      0.2620075558251411};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.0377305946835891,   -0.014360000783653522, 0.12343808931899407,
      0.06295348243543031,   -0.051683765938119415, 0.14163743745547364,
      -0.05904899705090439,  0.07055391632789344,   -0.08100028695279615,
      0.1473242091826462,    0.2515808214182263,    -0.10090200161679518,
      -0.038870436358321145, 0.11225841649316426,   0.01237281401599533,
      0.1590572987434662,    -0.14622415020585416,  0.1290217712304369,
      0.18792016566545353,   0.019790604319996772,  -0.024060789822750586,
      0.1494766283954271,    -0.11564526671033064,  0.06101404511407088,
      -0.207628077845796,    -0.15827980880213596,  -0.05320496061641316,
      0.06603882915256745,   0.07740636897161605,   0.01694367761390664,
      0.021581465502962572,  0.09047419185671958,   -0.2696373928057481,
      0.07253812443807357,   0.10995037001529785,   0.1305337534073932,
      -0.019332079691000145, 0.02174336672264865,   -0.08758114370341319,
      0.1546282311086212,    -0.2882596217367868,   0.03932955547097441,
      0.06699357884929512,   0.10461706876294664,   0.10361138710855128,
      0.0788218046731468,    -0.01673413947150538,  0.26561584311466246,
      -0.4590199115370871,   -0.09270368027956331,  -0.03269895176783842,
      0.10599448475304572,   0.09597072807223213,   -0.01116173939703436,
      -0.0659941676955028,   0.38626926195412725,   -0.25569025708467163,
      0.08015963141696059,   0.21164763882197038,   0.02239943009634431,
      0.1038186874549395,    0.04351057118262515,   -0.08702322565116961,
      0.2805073170544419};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse2) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      1.3611489625901996,  -1.3267466514017467,  4.156445006530637,
      2.2575431110399267,  4.353634005400934,    2.386703425169605,
      3.742219437400845,   4.51999568841711,     1.7241192785116137,
      1.721916060666401,   -2.9666136324147443,  2.4006384642159473,
      4.883289679805017,   2.190638176624499,    -1.1950017087313736,
      0.13679641681664823, -0.17823820736934515, -0.851714912391647,
      -1.2443683606157299, 1.5500899551795735,   -0.10285465241985747,
      -4.6503352823642485, -4.292220443670725,   3.940844191901011,
      3.2661311540229025};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.05738618870707108,  0.09840144316584494,  -0.24612696872787196,
      -0.3534046760501453,  -0.05069931056117595, -0.2250875476891407,
      0.23005436451506994,  0.09313585987144442,  0.29898174397484917,
      0.07092899806382925,  0.1810185895241103,   -0.09176389695883207,
      0.006041446015866287, -0.1566292105177194,  -0.1163670522868026,
      -0.07430400377425897, 0.12079063922509589,  0.04829731222795628,
      -0.20698340332405019, 0.1512674591532243,   0.008867391674226639,
      0.06431554672818122,  0.0745214125325993,   0.4584685091948306,
      0.07012407734100043};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse3) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      0.2376284664880446,  -1.6167221139366204,  4.25417290759753,
      -2.039550642920701,  1.192705215505672,    -2.3416745550752003,
      -0.6067775986707673, 1.7811285730260709,   -0.841261207175954,
      -0.9475462145192299, -1.2078978760632584,  3.7921810713758948,
      0.725903657398308,   -4.774390101726942,   -4.649028502214644,
      -4.876870997617586,  4.747681145777062,    0.5029553951707939,
      4.205843433648093,   -1.9379392392318637,  -4.077381627351874,
      0.5974094423226175,  -1.33631165494702,    1.8539750744361827,
      -3.28414827704669,   2.678333650833469,    0.9471048648400204,
      -3.3354824873038105, 3.0965596711054673,   0.7019886425713207,
      -3.866942847795686,  -0.35230001659702115, 2.5418664116364775,
      -3.638345961581362,  3.8409951027628804,   4.1121057779687415};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      0.13599737775411316,   -0.2380643617170192,   -0.1798839980599358,
      0.49217209698207837,   0.28229616142125374,   0.04889827845034718,
      -0.006182235201022744, -0.11237022739647146,  -0.14776168769135292,
      0.23603381397906856,   0.3455360205675591,    -0.04722499271301736,
      0.13249778059333941,   -0.07518978140237689,  -0.11712728802108495,
      0.11183162898769242,   0.016045612633813145,  0.1059585724841664,
      -0.21836365906214475,  -0.40350439312268754,  -0.15872851207707503,
      0.15781248443418916,   -0.006310502339835976, 0.1971028935813386,
      -0.11755149689998862,  -0.5627686194639617,   -0.179493428772512,
      0.41627451035520335,   0.3151124785089476,    0.23252378458940715,
      -0.03794731800696583,  -0.018371123194780885, -0.08219913195594825,
      0.1647241393417726,    -0.014769953988182885, 0.1768249126453862};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse4) {
  S21Matrix matrix(6, 5);
  double *arr1 = new double[30]{
      1.9644841837323366,  -0.0762319585261313, -3.7732657442867765,
      0.4581703311589971,  0.966301778254909,   -3.332022114198775,
      -2.233441245121053,  4.833699738820426,   -2.35642510109907,
      3.301486150916954,   -2.5548510823292747, 2.1156215861817707,
      -3.2367511350204294, -1.2740407276103047, 4.639472677481182,
      4.109070821836351,   0.388172151430509,   -4.503611969229099,
      -0.2149989121387632, 4.585741566057589,   4.062093394811976,
      -3.5757517701905464, 4.857143456754413,   -2.462757814409385,
      -0.3202921942989656, -0.7690159809717017, -2.7003869005627266,
      -2.2920394333387373, 0.8621979880386732,  -4.678948523724392};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse5) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      3.2405771454632077,  2.111136610987155,   -0.2588380254998732,
      4.775972487824356,   -3.9255414706092084, -0.05307909476402095,
      -0.5458618197451424, -1.810683546163455,  -2.7699065853163285,
      0.8563944139793858,  -4.555683061317842,  2.5607721591747072,
      -0.5099972959304653, -0.608714114757575,  1.3204694298860176,
      2.4821478718775527,  1.3645169482387862,  -4.843584475528981,
      0.8075504454633524,  0.4535983029010229,  3.389799314812695,
      2.0514500869879555,  4.162546800456935,   1.781270278789476,
      1.5461189895198002};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.04882510856171399,   0.17808225133796557,   -0.09726919392837467,
      0.027327164888116446,  0.10038152669946117,   0.20633936215927376,
      0.38306243011375896,   0.21780537157644211,   -0.055219044851108144,
      0.14189278413121875,   0.03081710629254449,   0.06370556847201106,
      0.0012329489701546931, -0.1565641917218431,   0.08783665224584214,
      -0.1512596261268906,   -0.5990668238484622,   -0.048891140851732816,
      0.18224020682465492,   -0.06392977899164598,  -0.2895285523493898,
      -0.3800315726096224,   -0.022726370654437323, 0.22490650668378792,
      0.0756040417951839};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse6) {
  S21Matrix matrix(7, 7);
  double *arr1 = new double[49]{
      4.488007133086953,   4.298709293919373,   -0.0018188884085343915,
      2.3390074015884865,  2.0680166635521404,  -1.7189907121588153,
      -0.9057676286284009, 2.789311581555422,   -3.7411263770337175,
      1.327041697938137,   2.0768638406103825,  -0.7245672816108382,
      -4.318884329111227,  2.521414469439291,   2.375687216072089,
      2.427938734868392,   1.02766777653558,    2.4921173802681365,
      -0.5256651270174908, 1.945138933715195,   -2.4949423509657,
      -0.5676495735111455, -4.68810321572359,   1.763942804587904,
      3.0783925505983785,  -4.269023158941007,  -1.1327428632837244,
      -1.8942116397194764, 0.9805714991865679,  -0.3766955729103927,
      -2.3860027002633655, -4.394168527136699,  4.356344284551756,
      4.120036016496599,   2.5131232840513373,  2.43670799530069,
      2.6506921169567965,  -0.1790935251181045, -2.7171654838455006,
      0.6493847748443118,  -4.263260942090792,  2.5945472887950514,
      2.656006329550383,   1.852805982225667,   -2.2644531674525115,
      0.5288032814881038,  1.365802284862113,   3.187956167301355,
      3.502405629538112};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(7, 7);
  double *arr2 = new double[49]{
      0.10466687553322279,   -0.03931338830124303,  0.08531558499671792,
      0.24927524621718297,   0.170371182276845,     0.14879080692423916,
      0.01848962966396791,   -0.07778046117722356,  -0.024006186727271766,
      0.09820002549873603,   -0.16161912190441138,  -0.1334698111149191,
      0.04561616704174446,   0.04168960029707678,   -0.5576302175281439,
      0.4740209964188326,    0.687398203815182,     -0.6373033682596182,
      -0.12330497620405069,  -0.051480594202894296, -0.2138547052673424,
      0.07631131772219603,   0.0853983881564248,    -0.09469863573033986,
      -0.11917257619679418,  -0.14578806736998726,  -0.2067938373926017,
      0.0841449220507455,    0.06551580362890577,   0.17755700300977725,
      -0.028843184012614743, -0.27857437019456005,  0.027756642718750415,
      -0.22165657661364804,  -0.13780556696941484,  -0.17311191852558133,
      0.05000875297566023,   0.22647904823397166,   -0.08650811713410589,
      0.025322764710070535,  -0.03408365300072984,  0.04085418891150532,
      -0.2782582878153244,   0.22133396943574485,   0.14718525589819784,
      -0.3102127667211792,   -0.15017574065692021,  -0.021566067543034438,
      0.11502448530564183};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse7) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -2.814613937450038,   2.37161017603945,      3.670519124916437,
      -4.830966722055675,   1.333415851230395,     3.0582744458337547,
      0.9425422756474644,   -4.469755102133512,    -1.85757522252013,
      -4.174973720713266,   -4.324822925539955,    4.651945017748236,
      4.559938092570796,    -4.1054044246995005,   4.660714326938013,
      -3.7010522662177303,  0.30058348195406026,   0.5501341935914441,
      0.8484928641569827,   -2.1654599965337007,   4.083368017794463,
      4.806299452676511,    -3.0375599108805518,   -4.427584070561831,
      -4.634540206543328,   -2.007458101742665,    1.3845562477652882,
      2.9458757892340266,   -3.0109257363495088,   -3.03605690243846,
      1.2529795681805016,   -4.772764427694215,    3.1234726491540528,
      4.6485811368853085,   0.48662276221952894,   -2.7395956410700206,
      4.8372506525062064,   -1.9718464926761712,   3.763099838217004,
      -1.085703007703398,   -2.891899195557074,    -3.8640335495774067,
      3.226237672290928,    2.2550969087857142,    -1.123865443965375,
      4.753124510953269,    4.889678042483981,     1.5659449151745655,
      -4.57749392231145,    1.1959469197042871,    -4.12867091640819,
      0.5436905028680963,   2.0348005666400404,    4.3374956162143725,
      2.0649931527556253,   -0.007926832057185251, -4.53637333998325,
      -0.23535545933570656, 3.5322749466133416,    0.6169903724470327,
      -1.4691589131795335,  2.8190486252088043,    -4.344735737861028,
      3.241727701144656};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.1124758934415202,   -0.071359099749286,    0.08865964389832486,
      0.019781416264628614,  0.035223901913096274,  0.045215779500479926,
      -0.04345743527143087,  -0.09648885467505249,  -0.16996285556269808,
      -0.15146064245434498,  0.06841209979721873,   0.17757602283143176,
      0.1982929532362446,    -0.009521167110775126, 0.11326520000585358,
      0.01889963386174901,   -0.024939907995284605, -0.016120246408924774,
      0.040715074234245675,  0.05386108992375336,   0.09830615314921717,
      0.06626864736793332,   -0.08684104909365996,  0.08281646015047081,
      -0.30989907981205667,  -0.1083955406964799,   0.1704563445859494,
      0.22392120540317198,   0.1862755584731652,    0.07561941931145842,
      0.06124189749302225,   0.037446682588649916,  0.015820268380364644,
      0.11226278618975656,   0.03501839949379497,   -0.07892188352933933,
      0.061292078463394295,  -0.007966332727172324, -0.031187218040989978,
      0.1059148583798194,    -0.0775759952244535,   -0.0846281922960339,
      0.1036736751073459,    0.030257600917365887,  0.00637055778115462,
      0.07412910009815352,   0.06622206978866517,   -0.050949181175976466,
      0.028306927504722135,  -0.006851629291685441, -0.05922452130456653,
      0.0034965776982121373, 0.03694000879222761,   0.07048143806207743,
      0.02417970805091684,   -0.06614957581783733,  0.028991991224053125,
      0.04263031845812919,   -0.10143380821534798,  -0.11812675115938948,
      -0.007136016333101726, 0.0023706919724157836, -0.008936142031912654,
      0.08110967039117975};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse8) {
  S21Matrix matrix(2, 3);
  double *arr1 = new double[6]{0.06152081004684096, 2.1826362655864546,
                               -1.287095824421327,  4.241220148457375,
                               -2.065973778354789,  -3.0971411134099283};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse9) {
  S21Matrix matrix(6, 3);
  double *arr1 = new double[18]{
      -2.057583527225529,   4.8682990595587015,  -1.2138005905373839,
      4.6372547403071,      -3.1867543478196647, -3.8732627182428825,
      -0.16153996068483956, 2.851560330985987,   -4.391682992316216,
      0.5775807027884072,   3.153362926103375,   -3.7505646340180734,
      -2.4515203196770488,  -3.55456752681792,   4.635137363927651,
      -2.305641434311092,   2.244842044214197,   0.45793480253288};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse10) {
  S21Matrix matrix(3, 8);
  double *arr1 = new double[24]{
      -3.9198547476234435, 1.1850875258858604,  -1.97887525426622,
      -3.1939922591382697, -2.5147614697309306, 3.624133309189432,
      1.0738765063900164,  1.2036053403801308,  -0.5275419447679397,
      2.62322030779608,    -0.9031024837173627, 2.1567943536608345,
      2.9663877765670357,  4.096636340444656,   -0.7753811099472943,
      4.242211256664149,   2.228353693387117,   4.786424570361854,
      2.19299739980742,    -2.6398947709377563, 2.0204967544878247,
      0.17190514145961622, -0.7832067521597477, 0.9663928526420653};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse11) {
  S21Matrix matrix(5, 8);
  double *arr1 = new double[40]{
      0.18945817980462465, 0.6686016856095822,  -3.1915043422552056,
      3.7623887418982545,  -4.350060704000748,  -4.644817027454561,
      3.8650644114005885,  0.807394428307223,   -3.565780972478679,
      -0.4584142016289441, -3.869398597808753,  -4.505988016496559,
      4.328973820237165,   1.386098310462617,   -2.856849235760983,
      3.8713467053777304,  1.7314620701438965,  -1.4423276614860403,
      -2.857220593582348,  -3.5699123909547223, 4.294404988700228,
      1.2725060196644673,  3.413267370523549,   -4.731248089650164,
      1.562683109096703,   4.531959300163459,   3.0731871456028745,
      -4.018929729493581,  3.9055181710529823,  -4.206122312601275,
      -4.471904769418412,  0.7298230837705466,  -0.6107323621389664,
      1.9607399250769486,  3.5522991408140605,  1.6903558530969907,
      4.046660743136828,   4.61946462687307,    -3.3633417094340556,
      2.4794318788642205};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse12) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      3.503008363853141,  -4.076778920640666,  -0.8570144582616095,
      3.554147835799755,  -3.9677970776954052, -1.882266464678005,
      -2.420859346410942, -1.9285214275063325, -4.311490233858306};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      -0.6830369451853183, 0.8070586311556036,  -0.21656708197315946,
      -1.0075612689807938, 0.8705964351961605,  -0.1797985979532832,
      0.8341987745226076,  -0.8425716198526999, -0.029914507443151522};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse13) {
  S21Matrix matrix(7, 3);
  double *arr1 = new double[21]{
      -3.5700248838839697, -0.6940179545544751, 3.520192664548551,
      0.8017669984517948,  -4.068737187815012,  -1.7638252583084646,
      2.437748357756969,   1.6798799572386862,  -2.380077036348313,
      3.6595344495716358,  -4.907929172034859,  1.275762659418712,
      -3.9434519954534295, 4.725561734613791,   -1.3164516595960696,
      2.461102969384841,   2.664719655445249,   0.5923512411488518,
      1.321839433159421,   3.8842049591395806,  -4.85627544900737};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse14) {
  S21Matrix matrix(8, 4);
  double *arr1 = new double[32]{
      1.2949369293143214,  -0.2975914867303562, -2.889167246222475,
      4.464991605894642,   -0.5732399137078925, -2.0903393616183052,
      -1.8002071940769393, 4.32376752680436,    4.129354978118325,
      4.036088271198441,   -2.621867616040503,  1.1002122320337246,
      -3.8801930320653266, 1.3998472022427073,  2.3791834553575333,
      -0.9788886423066536, 2.2190045459237915,  -1.5854941051218896,
      2.6237286051230146,  1.916999029776897,   -2.9996778122729637,
      0.7895801183008349,  2.236928539241635,   -4.618721719377707,
      -1.2730207627790135, -4.610829997440834,  2.682141365852705,
      -4.001941059440625,  -3.0400907585173895, -2.3448845724549496,
      -2.0352334851302825, -1.2759474268285462};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse15) {
  S21Matrix matrix(5, 3);
  double *arr1 = new double[15]{
      1.4758291955410066,  4.982564389617579,   0.7439195846885838,
      -0.8801540456960124, -2.1698403722527573, -0.21403737004761858,
      3.215709176992892,   2.546440396782179,   4.238608812278038,
      3.705610304853046,   1.007417912488874,   4.718744595563608,
      1.4529789269036169,  0.19974823038006928, 1.6345320847153078};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse16) {
  S21Matrix matrix(5, 2);
  double *arr1 = new double[10]{3.6558238659521294,   -3.417170354870016,
                                -0.15170450488835563, -4.298712300239867,
                                -3.3547307558155115,  0.7624858101695615,
                                -2.125168834702796,   -3.0396900546536365,
                                4.457228675776781,    4.830892713367637};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse17) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      4.864918547086235,   -0.712680153234869,   -3.9152951719259557,
      1.91701410525698,    4.443815574569099,    -4.007193800262318,
      4.613091288255303,   1.581430708718246,    -1.6180997482573423,
      1.5869100742907705,  -3.592794515906591,   0.87559889551276,
      -3.723417475282388,  1.9139187015056338,   2.7549221479043435,
      -2.8943143951731565, 2.422465415965771,    -4.7959534596550455,
      -2.8825377545892596, -0.6755319240776974,  3.645873967696531,
      3.1767882488242254,  -1.1652273197849583,  1.6999392635051178,
      -1.6847156770657747, -0.5041610961858014,  2.894284426038473,
      0.9934977330112451,  -1.2356520190525435,  3.438952783965769,
      -4.458062555118699,  -1.759806637179806,   -3.002848645852947,
      -1.7043892993598209, 2.3865482885008005,   3.937882502908584,
      0.3609846615470893,  -0.9936795699692,     -1.5711308541835232,
      -2.5524487685479014, -1.2552888760665324,  1.349637631702878,
      -4.859939439500951,  3.2295036909933366,   -1.7738884471761418,
      4.600804737306271,   2.485972965684433,    -2.392309656591516,
      1.1019633375379652,  4.933422471710998,    2.031988235464243,
      4.248483019860393,   -0.8063775773668436,  3.2459296239765862,
      2.3741831178101327,  -4.950334909903953,   4.599558716590133,
      3.3377699051904095,  -0.34246581626813377, 2.059458953181564,
      -4.591286513785171,  -2.847284409966133,   -0.5439854471211962,
      0.07255601694099756};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.032847243971498345, 0.06855540783556788,   0.17003857226240027,
      -0.06818143360288874,  -0.003273838578261261, -0.13275818505870096,
      0.09935777735159954,   0.09957051305193691,   0.45465557950578206,
      -0.00133761111603758,  -0.44439730425493257,  0.7091506881471721,
      -0.33855164017993317,  0.10699096798913184,   -0.13796555304240002,
      -0.14633015681271297,  -0.542290813362134,    -0.2459339642434935,
      0.322527172289953,     -0.7948486906426201,   0.26664377906457576,
      -0.028926357991159155, 0.24232978936315544,   0.1341849185199529,
      -0.23348787927304826,  -0.3115969607668629,   0.11036898275379477,
      -0.3964607832805085,   0.2281888012358412,    0.24188046599454482,
      0.053877065166407216,  0.13607643451867987,   0.49689170207375494,
      0.07878627732378997,   -0.30416679045802925,  0.6873496120308413,
      -0.23977137828652112,  -0.016109747410446244, -0.10794984163311695,
      -0.22095471422267926,  -0.32308079071351115,  -0.19165025513696646,
      0.21558396622386275,   -0.40013276569338063,  0.06447634814309221,
      0.11982666853033833,   0.1347951031156447,    0.05669856801545917,
      -0.608316781269753,    -0.19334827326841916,  0.3913737627800332,
      -1.046333019396414,    0.30314721866129574,   0.02552820385105714,
      0.2583212077925779,    0.12900840597529695,   -0.5617239173888502,
      -0.5856698103589983,   0.2006905501817335,    -0.8511193632645857,
      0.1938871465790598,    0.36622413682230087,   0.05818574939801614,
      0.18323956923959295};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse18) {
  S21Matrix matrix(2, 8);
  double *arr1 = new double[16]{
      -3.4950084787894733,  -2.8675005112997667, -0.9278506046544885,
      -2.6356056555297123,  -1.0194229577820915, -0.3976753194651952,
      2.8498308267759054,   -4.260968138945924,  0.6988635545967874,
      1.0833107555930601,   0.40866713795599896, -0.5003175197275356,
      -0.41412089846892286, 2.360804382263609,   0.27818184314342176,
      2.1576793169716533};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse19) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      -1.347187150954805,  -0.1709745496118682, 0.8684896300891465,
      0.5405739705820034,  -0.5659181703145943, 1.8573062982500907,
      0.9212359790833791,  4.124714500546558,   -2.508637052084657,
      -3.1045162086454448, 0.17076238326563242, -4.262939047767188,
      2.8453735091964205,  1.3023446765541085,  -1.7678438556991338,
      -2.083285692437906,  0.5793134885528781,  -1.9422518482280884,
      2.8658313726420923,  -1.9340301408271046, -0.8662828867339254,
      -4.222301002751991,  3.5734159488569244,  4.248824861732718,
      -3.9689822424417045, -2.225760145321485,  0.5340878794194026,
      4.406555049672994,   -2.954198300693794,  -3.197338472153116,
      -1.5867367692441814, 3.43186970476712,    -1.4381457498172887,
      -3.813825701927577,  -1.9897050032564136, -0.029310807225511937};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      -0.4046429055334674,  -0.3537238302963445,   0.2692687123930515,
      -0.18324301363006848, -0.17132662867005738,  0.0884112836606797,
      1.4021598821379035,   0.40640667621478876,   0.38140923255852555,
      -0.04640437084293631, -0.017866751280148127, -0.30969086416848635,
      -5.730504011074578,   -1.2982540247541028,   -2.4328712325895823,
      -0.6926598068306855,  -1.0507729440392424,   1.1262666142932614,
      3.2053566000904516,   0.6964707466533016,    1.2579294057781507,
      0.18273341233370508,  0.4192119474737042,    -0.7798923939159248,
      0.7047614204262305,   0.581113023257562,     -0.22334190124826486,
      0.21355736189229518,  0.057920697767332475,  -0.42065028096006046,
      2.335421030594556,    0.3622674512938509,    0.9338755411655368,
      0.19859208205239615,  0.2610689048768498,    -0.39221193398529747};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse20) {
  S21Matrix matrix(4, 4);
  double *arr1 = new double[16]{
      -4.066432974314522,   1.3040391245225038, 0.1825608749702976,
      1.2570580754048102,   4.475359287293703,  0.6546295256993897,
      -1.3475090204325078,  1.254828660847239,  2.8641784564914516,
      -0.28415362562700164, 1.3723878870654858, -3.8926506160877574,
      4.99507253494809,     -4.98440524303998,  -3.1783153569168587,
      4.83231866411764};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(4, 4);
  double *arr2 = new double[16]{
      1.893527791387965,    0.5191390602005687,   1.3807308243818144,
      0.48485993664004373,  -0.07418923397819338, 0.24015238490471855,
      -0.16860718980284178, -0.17888282234995562, 11.248075084854618,
      2.141029896743429,    7.774534098274861,    2.780742865921475,
      5.364263764037088,    1.1192862311878145,   3.5123229896980583,
      1.3501888384193126};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse21) {
  S21Matrix matrix(2, 2);
  double *arr1 = new double[4]{1.567526886557351, 1.075831918057517,
                               -3.981116540997036, 4.753771967550573};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(2, 2);
  double *arr2 = new double[4]{0.40510460731064707, -0.091679716585462,
                               0.33926083623853764, 0.13358073718350716};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse22) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      -1.630896704754469,  -4.6341501822712505,  2.40299933056637,
      -0.8143306202440117, -0.15375660934211588, 0.9630461897571605,
      4.858487030814954,   -2.2706529064669,     1.8713927297422206,
      -2.607686255185383,  1.743169376843956,    -0.501565275187791,
      2.532602614753168,   -0.5534707902656653,  0.36761395584401413,
      -2.6319287140937475, 2.9687594951715965,   0.9479722737076903,
      -1.2856453666187182, 3.9796850565867867,   -3.872000826435187,
      -1.5931069435013612, -0.8328920089920713,  -4.52742896898374,
      -0.8218361296461367};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      -0.29618768783877797, -0.17673370984493583,  0.17616481988149785,
      -0.14362973846215077, -0.000527595350132492, -0.0002923417439178101,
      0.16367633483137223,  0.1171150055035498,    0.10149310951289504,
      0.024569548411027445, 0.2823735234528949,    0.21346035025448618,
      0.2636953190009874,   0.12043401734787325,   -0.02899224986676667,
      0.23538851109720693,  0.10097386676309604,   -0.22129345627931535,
      0.052471652642673415, -0.20932471642283115,  -0.1868824039831894,
      -0.2572073151326853,  -0.10516254142065112,  0.06883960879548132,
      -0.07939401529462495};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse23) {
  S21Matrix matrix(7, 7);
  double *arr1 = new double[49]{
      0.20750089581226838,  4.235091459067817,    -0.8587165873004228,
      3.768154463727221,    -2.2925366096971267,  1.5353843492288526,
      -4.086587173703479,   4.032199852803167,    -0.5852045625255533,
      -1.1019974440401126,  4.484604951369738,    -0.6059345160214171,
      4.142669742434524,    2.753014798393668,    -3.4547302741236297,
      -0.43107783105665476, 3.570431444556098,    0.03251581597517017,
      -3.789123317155826,   -2.0211322881983773,  -2.77247687698892,
      1.953907002462639,    -0.23747865515651867, 0.5473265909401315,
      -3.3322339162130943,  -2.024451024549289,   -0.2560727898149935,
      -4.556078692885556,   -2.192708173540614,   0.9602889096493659,
      0.39933403369384557,  2.716793193112041,    -0.1671890923716548,
      -1.370086224207708,   2.2369578464480853,   0.3316522198478955,
      -3.537020415117885,   0.6665839936264559,   0.5087333913094589,
      2.538741868809284,    4.619215284064943,    1.9686180980616177,
      0.08415073802443374,  -4.9363727848989924,  -0.00021235983286516102,
      0.514708245091887,    -3.301663901128883,   0.6535267112866459,
      2.105456997388135};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(7, 7);
  double *arr2 = new double[49]{
      -0.10961912323983901,  0.06422416830753624,    -0.48378995696324234,
      1.4112412266741583,    1.7245400212635438,     0.3643852505660573,
      -0.052913598124519505, -0.08405059502096734,   0.4156614087926035,
      1.1963807273829477,    -2.9111756695050435,    -3.8993619645591626,
      -1.1030206273082206,   -0.25660695890276447,   -0.2130154751604835,
      0.24954085524080272,   0.3213347219722514,     -0.021670521107820705,
      -0.09760485889987439,  -0.0066701046239487066, -0.2535633099751444,
      0.13300246825926448,   -0.3198400173804301,    -1.2164362510811075,
      3.051371016234127,     4.234072910028658,      1.116248839058202,
      0.13530805418809289,   0.032079284692476645,   -0.3460422505912099,
      -1.075784949007346,    2.5759085068306216,     3.51014682740386,
      1.0135863020244555,    -0.004848177236717847,  0.019033457323639973,
      0.33048132108192607,   1.1734545476997371,     -2.9385592186645186,
      -3.9991938140923504,   -0.9059072353320236,    -0.11282879154531378,
      -0.1808192234053635,   0.4049661734017067,     1.0705069405284426,
      -2.676266813276165,    -3.500548109339434,     -1.002904506430645,
      -0.13024408991565384};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse24) {
  S21Matrix matrix(5, 7);
  double *arr1 = new double[35]{
      -2.357914561107762,   -4.856628797239604,   0.4819036325279029,
      4.057920164987145,    -0.14259220606326206, 3.932540567029193,
      1.725443715864868,    -3.8121961142491436,  3.8164224378948983,
      -2.7597439629783285,  1.8303936123618794,   3.48673569842717,
      2.0529910551210317,   -3.464905997551091,   -0.6639623653978521,
      -4.825204095752857,   -3.4135971003040124,  -0.9544466129700089,
      -2.6767213344336227,  -4.405314377640389,   -0.8444464322097733,
      -4.7446849444541765,  2.3858991919133024,   -2.37659712980916,
      2.6525600521625217,   0.857716261121829,    4.474660853121712,
      -0.16889696588005965, 4.54316287925813,     1.0192479243578099,
      -3.6104564164229833,  3.0338726699561196,   -4.694419231782585,
      3.581873685338211,    -0.4609934847615902};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse25) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      3.412642279660007,   -3.499093492956976,   -4.394683971683047,
      0.43885499194690425, -1.068747661775805,   -0.5712769046046038,
      2.3086282491876986,  3.27025813081589,     4.904555192358625,
      2.6689492806408976,  -0.44867439405291343, 3.7374973827150395,
      1.511946833326717,   -4.189032356623503,   -2.778110720248307,
      4.19636097406004,    2.4402518732728815,   1.8984876139474078,
      1.2886021507292975,  3.8889595945986635,   -3.804172304317296,
      -1.004889645980016,  -4.842091956409822,   1.3815695584563512,
      -2.1018049270581707, -1.144462499928637,   3.431378175857269,
      -4.659805546675381,  -3.8165176350886787,  1.2535135696271658,
      -3.6352633059424377, 0.16858615799367271,  3.4232730429366,
      -3.0494228310962646, -3.405840378741891,   0.5088737812331487,
      -4.382767390508099,  -2.3506462827430896,  -2.9487604648715537,
      1.927075733821897,   3.1263198028857477,   -0.013215643251218268,
      -4.828144965081318,  -0.03171650617008748, 3.1952661520182204,
      3.1988373683302687,  0.29584650586944683,  -2.0298106351780723,
      -1.0131309849778756, -2.451056798930761,   -1.0954345988422909,
      -3.1691760041017645, 2.00420254715321,     -2.684183859321254,
      -3.004071598830799,  0.7187434323493536,   -3.0451701648403215,
      2.4309228251602155,  2.5608618516629376,   -1.7667882050341879,
      0.3586075490920928,  -1.9275226303435957,  2.415422046528821,
      -4.688044334594828};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      8.045646366041865,    -1.9234952728733699,  7.779605620355866,
      0.8676531277033829,   -7.000238638866544,   1.3502915654983714,
      4.0945320221945245,   3.380107190730577,    -9.878933287601717,
      2.664046553647024,    -9.7053846496172,     -0.8311598417596898,
      8.660992888077496,    -1.474590594190648,   -5.274619549984851,
      -4.00672751134764,    9.597686299978667,    -2.4306761389738583,
      9.400204505001135,    0.9561129820175334,   -8.507855101152495,
      1.4432358244825871,   4.999024178326802,    3.9682603025135395,
      2.4111684422211677,   -0.7506620175010572,  2.541679154963183,
      0.03562809749614518,  -2.1760180661790045,  0.30904304278497,
      1.325707047454981,    0.9353154138239809,   3.403371549901437,
      -0.8601738915603581,  3.34762915502087,     0.27135583606502006,
      -3.1098303215324945,  0.5589507845798483,   1.8966175599839277,
      1.370885355480495,    -0.2569527529682429,  0.01530985275517198,
      -0.22475590091256412, 0.029104492230234997, 0.14730599624208798,
      0.022342774240905076, -0.19570155040553186, -0.2098543403337643,
      0.515723956530766,    -0.08213299475120486, 0.3304950712442824,
      0.04588050053130026,  -0.3864764176101807,  0.02781360874194645,
      0.12050349010465022,  0.2328503837605371,   -5.382951215890025,
      1.4715595064410387,   -5.39014855270058,    -0.4532976400080112,
      4.713179980320574,    -0.9219217821076372,  -2.8759851189745453,
      -2.360225966305206};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse26) {
  S21Matrix matrix(7, 7);
  double *arr1 = new double[49]{
      -2.9495169234831478, 3.8830730479426236,  2.9973292899279897,
      4.470563273914735,   2.981027548191866,   -4.03619154194096,
      -4.325103310755985,  -0.945125725382642,  -4.412910905299184,
      -3.9864216596205004, 0.45971872581918394, -0.6908999680838441,
      2.135628246463014,   4.6496345622999655,  -1.1189429408452245,
      2.5137509135846354,  -1.890181471820982,  -1.2954171671749162,
      1.1016915763546278,  1.3439405627384478,  0.15256023793465356,
      -3.8524693288841605, -3.1047280649912357, -3.000865423605079,
      3.35253296535749,    3.585482514115485,   -2.8357940336576037,
      4.429754008660041,   3.8761863699098402,  2.0401723848770086,
      -0.1354553282504405, 0.7406634918970418,  -2.49317264968276,
      4.961232821554468,   0.5013136522914721,  3.278260940332917,
      1.4547383362209851,  0.4569870117504635,  -2.965193836909734,
      0.49077064606473897, -4.533430316233287,  1.355279773610456,
      -4.0957308686411595, -0.6992854207281081, -1.7535756586878937,
      -2.0229047957043447, -0.707833154778049,  4.725705873320855,
      -4.309028508367807};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(7, 7);
  double *arr2 = new double[49]{
      -0.1300294332712917,  -0.4470705349652464,   -0.46437859888607236,
      0.5605594584212237,   0.5386996744403709,    0.4291675856546358,
      0.40558343159902255,  0.19786479054385805,   0.3604137671003783,
      0.40695533411598367,  -0.3936110419118555,   -0.20087065864472436,
      -0.13704995787331584, -0.2664054038535692,   -0.33163286741046316,
      -0.3959274901862448,  0.18733575380447598,   -0.09348884227754492,
      -0.33547829416982405, -0.5604308938007744,   -0.3991258857678965,
      0.20573686523821172,  0.1830848975551892,    -0.14066666159073038,
      0.02320791280477272,  0.1679271250949664,    0.0912754773345525,
      0.05817502578847055,  -0.5488693482952677,   -1.20353499012012,
      -0.38010559396940213, 1.043530405882962,     0.5216606753297215,
      0.171368935035638,    0.4261473818440368,    -0.2859156363931313,
      -0.455947283369877,   -0.011377846810486685, 0.2738977774373742,
      0.12826411196663243,  -0.17883909825148336,  0.03483706972757547,
      -0.09354462289655563, 0.13928968042236695,   0.4151104262526521,
      -0.31281922029809756, -0.3667711247942288,   -0.4247461128112029,
      -0.4710258386648315};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse27) {
  S21Matrix matrix(8, 3);
  double *arr1 = new double[24]{
      -4.995867033413281,  -2.299848263107551,   4.658060292348377,
      1.8636411209564532,  3.7809086993299044,   1.708081601218007,
      3.8136114373550782,  3.0108948065815238,   3.6497738514970113,
      3.358085684020171,   -3.2812521914977912,  -1.9093106155944461,
      4.8825490669335,     4.0629337511190435,   -2.3785469389568625,
      -3.062872831922967,  -1.929923042616096,   -0.11234520432604,
      -2.7137482532339186, -4.602319121746269,   -0.7375600757053231,
      -3.0370497130422933, -0.37856488357363816, 4.390596498581923};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse28) {
  S21Matrix matrix(6, 7);
  double *arr1 = new double[42]{
      -0.15440126636449136, 1.0309495907220123,   -4.644710144254587,
      -2.5385768615523494,  -0.8670242308905038,  0.3663018057833103,
      -3.077648762175609,   0.8820793281022565,   2.412267100726117,
      -2.5383245378879407,  -1.5940556412799713,  -4.219772400310779,
      0.5976251494073184,   3.582055346100038,    4.012317969114598,
      -1.1220539231565918,  3.1238137488546016,   -1.0661175542494061,
      2.138324367195499,    1.1287999363993926,   0.3516121701117356,
      -4.839423153096272,   -1.1862908067836306,  -2.204977651878859,
      3.5136501394664226,   4.120525361186196,    4.369904732812705,
      -2.7217487095002415,  -0.03826586594693371, -4.8747226336761145,
      4.450277695689511,    2.8107054710173536,   3.386328620863509,
      -1.7315130790485744,  -2.6279364011121498,  -2.8330406567502875,
      0.540054429943134,    3.7635066077033663,   -4.321563813596096,
      -3.017541317746656,   3.856108687367927,    -0.7491536467244071};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse29) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      -2.7887160984312107, 3.94992772880231,    1.2879852902854152,
      -1.878813309423717,  -4.747753171881541,  -0.5014097239755522,
      2.075153822831748,   -2.3381051336599814, -0.6811262329897696,
      1.809909901346881,   -1.364358574311951,  -4.227432232298933,
      -1.9688829563273536, -0.5948723309800608, 1.4862719053018845,
      -2.776462192122484,  4.776504283502478,   2.9725169893850545,
      -1.0951249856870602, -3.957846077572287,  2.6104857523573504,
      0.38010823082062917, -4.294524256688383,  -4.18514560244107,
      0.8530263720191051};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.0027687408100324604, -0.1565376482169807,  -0.22261723191991956,
      -0.13864208212657556,  0.09215430670200399,  0.001363401889765657,
      0.16436291978542641,   -0.13233416722487296, 0.020815144821707623,
      -0.013998730325807954, -0.5533000613883252,  -0.2025261715696432,
      0.10824587910970329,   0.6333651165788431,   0.10023234672329624,
      0.458967478770522,     0.14853947200504172,  -0.23296402941766353,
      -0.6286509563443777,   -0.2715444627011165,  -0.5428446567720229,
      0.1149663909269619,    0.14221903635744215,  0.5193476518440722,
      0.06887320280856021};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse30) {
  S21Matrix matrix(2, 5);
  double *arr1 = new double[10]{1.8373188907929459, -2.045688699756437,
                                4.75317298916984,   -2.367523425855623,
                                3.4609087221595694, -3.7656620988013834,
                                -2.089090352251258, 3.5995535322630783,
                                -2.810057408629798, 3.448817398997715};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse31) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -1.0553358386636633, 0.1598106931849177,  4.910215413785021,
      -3.438936909825061,  -2.5948347233871596, 2.4598323241423445,
      1.7841042890990924,  -1.385902901682985,  -2.7647356947261645,
      -4.937879329718444,  2.0412689077932615,  2.3397467427012515,
      4.6608880704298326,  0.5366608036688376,  -0.1962271670157234,
      -3.772230952464245,  -4.390404676507202,  -1.4996764484017158,
      2.579951205789115,   2.0287779655187563,  -3.2720505873582773,
      2.495564424247921,   2.0076662410273824,  -1.1623483142023492,
      0.05568077161158147, -2.1899689616057905, -3.8885222801207076,
      1.8112838997767167,  2.4389213035136024,  3.8631561162528065,
      0.672346457465256,   4.301003032593307,   2.938475415283542,
      -3.869409311425962,  -1.6064288294688844, -3.7126195816591,
      2.5515195258928305,  2.0336396821748046,  -0.3677382061007064,
      -0.454121069273139,  2.145211333808426,   0.2726578226791423,
      -0.9948322491505577, 0.225927162463881,   -2.704299786628633,
      -3.1691642031175347, 1.4289970003441423,  -1.354214298919345,
      -3.2368242331692554, 4.320678513061829,   1.3232746011060303,
      -1.607104447048524,  -4.3708217983757915, 2.266801443149312,
      -0.0833356548246611, 2.839922134915817,   1.2623733092073453,
      1.0853574622414852,  -4.481131225739343,  1.5519991067761572,
      2.37577869132386,    -0.9989347643900972, -1.8597646224804985,
      -1.2788040069337803};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.03653409007357586,    -0.518148361639331,     0.2683358628957082,
      -0.1294228611219852,    -0.0456863902664823,    -0.45688341572887947,
      -0.5822485175660458,    0.016671424234409135,   0.2826495674084219,
      0.06607363936791891,    -0.19148808510683799,   0.12130646998007266,
      -0.20288797118989654,   0.07525027481339916,    0.05565078558011478,
      0.19676202582606075,    -0.0031890492193986965, -0.24309855296208457,
      0.11726607741710654,    -0.13123681188408354,   -0.08968714269015299,
      -0.35760662609717253,   -0.325932070245759,     -0.140699612260586,
      -0.06157201538133563,   -0.3789719415257476,    0.3150006823640859,
      -0.09271387791768304,   -0.13620708337497042,   -0.40772453760175553,
      -0.4703099351523896,    0.022174352311987163,   0.2308538593801108,
      0.3329948817442329,     -0.3704511958732855,    0.21517289820691768,
      -0.1447971555493731,    0.2314627787597106,     0.19263636385375302,
      0.06205445474013844,    0.1317832151253981,     -0.32675658672612234,
      0.2698948812197991,     -0.028141975692454996,  -0.007551318840292202,
      -0.37921230198133726,   -0.32360028234434285,   0.16669975691756325,
      0.47853764194622617,    0.5590006341508071,     -0.5126056723184677,
      0.48127447188658723,    -0.2264162087040417,    0.7668792111105989,
      0.41123814536706255,    0.09859915176112759,    -0.1575896059259374,
      -0.0025568324046534065, -0.07983118300187912,   0.04436675554546943,
      -0.002153994019297981,  -0.017901116069489964,  0.056396892213825586,
      -0.23690498998153198};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse32) {
  S21Matrix matrix(2, 2);
  double *arr1 = new double[4]{1.6694560226246447, 0.8457292054019252,
                               0.44563340093343395, -3.61963887413147};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(2, 2);
  double *arr2 = new double[4]{0.5638318749803763, 0.13173940831924866,
                               0.06941640443688461, -0.26005150020928464};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse33) {
  S21Matrix matrix(5, 4);
  double *arr1 = new double[20]{
      4.265842604794091,    -1.7898022551176185, 1.540740396531616,
      2.999533977341798,    4.815987123322097,   -0.8833248358858832,
      4.644332501245547,    -0.1609160772984497, -4.916504212670036,
      -0.29200646481112713, 4.712690346477487,   -4.912082527076559,
      4.997240750921163,    1.074254072647756,   -1.8109357006256808,
      -4.059634835467652,   -3.468453359818221,  -0.7516053860393264,
      0.5041414797967194,   -3.2004158972512586};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse34) {
  S21Matrix matrix(7, 7);
  double *arr1 = new double[49]{
      -4.207737535426597,  0.7474555065558146,  -2.6458987028896805,
      0.21206506269976266, 3.4999666001230185,  2.424203971004376,
      4.317543388864021,   -3.565851605435891,  -0.46028029706222284,
      -2.570077021931696,  -4.132083446484125,  1.754142864105476,
      -2.6617922685726336, -3.7280247397208433, -0.47208874169454607,
      2.627238716722421,   1.2848821707140576,  -2.030740537844359,
      4.107031105469428,   1.0419972683751304,  1.5334159487503731,
      -1.3921036066523707, -2.1869240323464387, 4.354224078057378,
      -3.5778124286571886, 1.2045055747667712,  -1.8284792445693165,
      -0.6437783549309266, -2.0923702328169336, 0.24138799980335612,
      -3.2155145118455253, -1.6501541322915458, 4.519179285448256,
      -3.6740901695368655, -0.3010459733227968, -4.395720914717788,
      3.095118555756901,   -4.94486094684701,   1.7489029458360692,
      3.921828430031873,   -3.1433322920711273, -2.0588092289950986,
      -2.3314300760836684, 2.982319563143431,   -1.602842745297819,
      -4.794083733942535,  -1.753962332363026,  -0.9750676847989759,
      0.32220032671298604};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(7, 7);
  double *arr2 = new double[49]{
      -0.11078730851941336,  -0.005744421799933011, 0.08791544129343111,
      -0.14877436304429362,  0.15540213842914588,   -0.13730786538533293,
      -0.02974082050657315,  -0.07826479205457708,  -0.08906178873202812,
      0.12137706163238114,   -0.01665161092710205,  -0.07446853558113964,
      0.11986367791971646,   0.10367341596872812,   -0.02835877965495651,
      -0.08758229085373465,  0.04090912557946517,   0.17244026891167363,
      -0.10686177805481399,  0.09101161139839178,   -0.0018027322210923502,
      0.0043476841235877035, -0.09962003509533603,  -0.06017222736764163,
      0.04333409341327738,   -0.05838762009397422,  0.1299949761872199,
      -0.06186575659881475,  0.0005508945076865085, 0.057265909577540706,
      0.13402578562050557,   -0.027351216737098415, 0.05787437088098417,
      -0.020314958195639013, -0.11302582868746042,  0.07519086815623513,
      0.20571125171270324,   0.12084997585534299,   -0.124788711033086,
      -0.18776434252110538,  -0.07304575041768165,  -0.09405861325486554,
      0.07693564131534007,   -0.20088368815449636,  -0.08380872022288831,
      0.05367736145181433,   0.16023245157466323,   -0.047695789358632466,
      0.0994363545950108};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse35) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      1.7793373215986215,  1.1109552273132834,  -3.6706831224954173,
      -2.2321452119050877, 2.6318745437309214,  3.1424275124564875,
      -1.4442607366007723, 4.925353887089548,   0.8843532055898784,
      -2.7089085203195253, 4.3203470626074765,  -2.247026789418457,
      1.2370939750964656,  -3.257786646090514,  3.750184652414104,
      -1.272194305374149,  -3.8005106376120468, -0.9201271899528862,
      -3.993581091333832,  3.7392912854594087,  -0.7611751235861579,
      3.2672319418693156,  1.3724417272572254,  -0.6567595809506752,
      4.472748141872547};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      -0.026193286042231857, -0.09090500058611567, 0.23869298678879605,
      -0.18640058539965892,  -0.08394225810884384, 0.4528821665844577,
      0.40649621450984785,   -0.406071212158462,   0.13389418495325853,
      0.20823991258415162,   0.044595831857552046, 0.254990001912436,
      -0.14205068415558497,  0.12376589920279589,  0.1438251117677087,
      -0.8807500810991975,   -0.9071265821426006,  0.8112499760096901,
      -0.5841045653257874,   -0.22301709738254255, -0.4782864863257119,
      -0.5238468520129024,   0.4999540346196585,   -0.25327261107437765,
      -0.019702216646487358};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse36) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      4.913788409659485,    3.2036156986036595,  -0.12121098156156496,
      -2.044585994463727,   -0.5312749628765143, -3.820585610013023,
      -3.5969702226397615,  2.953414913862755,   -2.3499651446606573,
      -4.732554218934365,   1.3885621868265563,  -1.0103570832040298,
      -3.5917704882953294,  3.2514715435162493,  -2.3273734808785616,
      -0.16312429931257633, 4.370142828614087,   0.5790638055578281,
      1.3516660498736872,   -0.9976709356453366, -0.35666953176959204,
      1.60854153010858,     -4.0456106677490045, -0.4207172932218466,
      -1.737033744622618};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.15541254007070956,   -0.012807980594791128, 0.09934727097131485,
      -0.060683782380369776, -0.11089484436522885,  0.010353603831723606,
      -0.02499608780036824,  -0.06959775249693309,  0.16021756052149871,
      0.06616468483629462,   0.030522386003991448,  0.051305608620101265,
      -0.00582944533456406,  0.0894215990415224,    -0.19266660130238278,
      -0.0820703509481646,   -0.03906695752408451,  0.15855581151120812,
      0.11976188723394082,   -0.14968801184309036,  -0.07353339626369565,
      -0.13054749368132285,  -0.10967462555879515,  -0.07644653781178011,
      -0.00667123003021203};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse37) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      3.95229007141913,   -4.795578962858677,  3.984769552947439,
      -2.147038282919047, -4.512036839812409,  -4.097407313214513,
      -2.833705826275236, -3.7297366491872674, -0.31329481735498277};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      0.10980138462831225,  0.12956215951442196,  -0.29791659613102667,
      -0.08660023179465719, -0.07959539211021331, -0.06047730174070394,
      0.03782774033213798,  -0.22429734335919002, 0.22270525741822458};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse38) {
  S21Matrix matrix(6, 3);
  double *arr1 = new double[18]{
      0.08766629594897779, 4.219491869984132,  3.8700918490837086,
      -4.091980924325307,  -2.864332966856853, 2.312684866503484,
      1.3986325584259376,  -3.688000584917633, -4.801311979125239,
      -4.453869913414841,  1.2965822674906669, 4.258591933610402,
      3.087805005799776,   3.0289757687870775, 1.1749543998345393,
      2.4333446004180805,  2.3191673943199573, -0.08023163840115188};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse39) {
  S21Matrix matrix(4, 4);
  double *arr1 = new double[16]{
      -2.9204377930936842, 2.8036205516725197,  2.5105251397072026,
      -0.7384252432066285, 0.6182977117252051,  0.9190673811392411,
      -3.9161117600843722, -2.2544549743719324, -4.9538590817799575,
      -3.3724831805483078, -1.0151223579078206, -1.656439700659317,
      0.9994151736628067,  1.7439469789846642,  -4.949664298994759,
      -4.965188509041506};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(4, 4);
  double *arr2 = new double[16]{
      -0.15423942746891076, -0.3421172550804833,   -0.1102477736899148,
      0.21505749914233538,  0.20631799281317154,   0.3600291715706354,
      -0.1085579830093344,  -0.15793966663687012,  0.0005241112483494427,
      -0.6055457518630271,  -0.019145492961391803, 0.2812586002743512,
      0.04089758948382004,  0.6612443401964249,    -0.04123486973990202,
      -0.4939676156781099};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse40) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      4.410505490804436,   -3.9020777678605745,  -1.5940159476801719,
      3.17887716907393,    -2.5058986638555303,  0.3402389415732987,
      -2.6891839728804334, -0.15153867917281083, -3.547345426743249,
      1.930583947911905,   1.3201195754697022,   3.9654483074252003,
      -4.085090598450565,  4.7064725362279844,   4.955627025836328,
      -4.2662415369053655, 1.3441356362017611,   -1.105872995865489,
      2.2470352485168963,  3.259640272470044,    -0.09600022219332072,
      -2.2787574792004683, -2.1446582633648026,  3.7725009316616145,
      -2.063361987473918};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.15090416825056838,   -0.023314536893282667,  0.051338349443531356,
      -0.060378217588769996, -0.17716657772888347,   -0.20714854010510017,
      -0.09729578529913335,  0.09467473815068822,    -0.1944345602455575,
      0.08076214338043615,   0.47793767172929785,    -0.2472769828326765,
      -0.20506435529523226,  0.4251609563083682,     -0.6326582734073688,
      0.2860121020489706,    -0.1747015933358156,    -0.05863172249624376,
      0.26871896175232457,   -0.22711634597039732,   0.24790724986307483,
      0.04614527198575685,   -0.0010005632821028494, 0.26693479349788657,
      -0.3232540602696069};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse41) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -1.0347409062435098, -2.106768908172242,   -0.38754360875591054,
      -2.53485627901488,   -4.385136771471929,   3.4445701002092104,
      3.748913008895956,   1.014433774974294,    4.42322736659904,
      -4.505523467658668,  -0.5013512015751509,  -0.4853602532836101,
      -4.496830146846288,  -1.4863304500871264,  4.923211626508264,
      1.6529747835980295,  0.21125334396649986,  1.3987074810723232,
      -4.942966737198131,  -0.9674108888402291,  0.8560889224755561,
      3.7465313624874845,  -4.438753712433372,   -0.773552041133847,
      -3.9956484712702602, 4.295499311747534,    1.4374447808712274,
      0.8890641629026828,  4.381072524679418,    4.6991332427042956,
      2.962519104050047,   0.7265063095326996,   0.1510958009061225,
      1.1448625156029992,  -3.4741941090313153,  -0.4624095797721983,
      -4.198774594721706,  3.200271555806271,    -4.068389265548667,
      2.051652233649685,   -2.7326413012682274,  -3.870402314262378,
      3.6575189381808677,  2.475171916764001,    0.19129931060258443,
      -4.614552837323039,  4.5077533874314,      -2.837245921611977,
      -3.031158113509086,  -2.550608162866883,   1.8726160414572792,
      -2.226047534653728,  -0.20752898857772273, -0.16892985459621634,
      -3.5710577495882454, -2.5156168500268663,  -2.931442352558956,
      3.192918505213571,   3.592972935006035,    -0.385517630723923,
      2.394417310460387,   -0.5800777228830034,  -3.806424651487317,
      1.8461514947023252};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.29340815188860764, 0.054380399120820315, -0.39268954942779793,
      0.14484545987515485,  0.09482087522456382,  -0.30755045917004914,
      0.2492588560433904,   -0.34739250940066196, 0.1786578194493629,
      -0.4917955411025201,  -0.3422002593320605,  -0.19380662265300871,
      -0.04844467482932559, -0.18442245564324475, -0.18428409408387714,
      -0.20565337197123762, -0.31190638113993,    0.05537951663616566,
      -0.5381282406403012,  0.2459794639522948,   0.20171784202163687,
      -0.27159175764774157, 0.38604507593989745,  -0.3160056907761471,
      -0.43117311242416717, 0.22389405292689138,  -0.19161091372116393,
      0.3168164243495853,   0.3742953496408642,   0.050984547958250984,
      0.2179139616042639,   -0.20917295090022056, -0.044389528850161834,
      0.2520908344697052,   0.3631767273839178,   0.07100795847235146,
      -0.16959545133243656, 0.10562661725154944,  -0.02315194651800623,
      0.2421669964431879,   -0.324789109604054,   0.20815516218128002,
      -0.2664789541128663,  0.36100335147522233,  0.24383654631275026,
      -0.1828383509433053,  0.38139691178083923,  -0.2938986357656321,
      0.18659189494207523,  -0.1071108835615052,  0.04487004910858673,
      -0.08023327759510658, -0.1335894183783013,  0.03977191117170661,
      -0.17198187384484356, 0.01898381114613972,  0.08234943144250471,
      0.3934888867814751,   0.513338639148573,    0.008526396541774938,
      -0.05893291251783797, 0.2573845299221573,   -0.196034044567119,
      0.5497712001268231};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse42) {
  S21Matrix matrix(4, 8);
  double *arr1 = new double[32]{
      -3.3281226061371836, 2.988861030454969,   -2.1610341204752412,
      -4.0614275787735625, -2.810105202032399,  -2.1975336522969324,
      -2.6441923619311147, 2.7079415459217113,  -3.6932302832545414,
      -4.816056600177751,  -1.8530621213016554, -4.760518047639596,
      -3.9031722173485095, 4.600669101725924,   -3.7696060888926786,
      0.24416197441168297, 0.12089426544261617, -3.1969416482696245,
      0.3844228442672577,  4.656987239572551,   -2.9191869338250767,
      4.952442667672486,   4.097117743305063,   3.976163132307345,
      0.4161367929184383,  -2.308962435091572,  -2.6042646751496132,
      -0.9059911060756818, 0.5011758365346779,  2.463901166391369,
      2.746644600003081,   -3.5332117755256975};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse43) {
  S21Matrix matrix(3, 2);
  double *arr1 = new double[6]{-2.0766498171571737, 4.991305540633741,
                               -2.175229207966043,  -4.945735875004047,
                               -0.8977006247918649, -3.5651215441503528};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse44) {
  S21Matrix matrix(7, 5);
  double *arr1 = new double[35]{
      -1.187615010361922,  3.3066503776717724,  4.9363303271808725,
      -0.4966543943261694, -3.4358097473819793, -2.7193899195336657,
      4.767258811199916,   -0.7537376534661613, -3.1669519875966055,
      -4.89121267001873,   1.4068121190179825,  -1.3977809759160866,
      0.26561917511155997, -4.8627259271818275, 1.680357072136479,
      3.659851394476277,   3.0561761138599906,  2.3905397287488324,
      4.249630414507779,   4.992705905113091,   1.2469319434540562,
      -3.3034933593750173, 2.437580587282002,   -2.376658400800815,
      -4.956809870543701,  -2.4952309782367124, -3.1203324685281544,
      0.9521409098923659,  -0.7090800181369064, 2.778960227880109,
      3.310402007726978,   1.1947894156305336,  0.9888901775787406,
      1.4889643968337065,  4.434544930172773};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse45) {
  S21Matrix matrix(3, 8);
  double *arr1 = new double[24]{
      -1.4708972504169706, 3.166984189875121,    -4.404207636504603,
      -0.376775356736907,  2.4607034348168666,   -1.114698386156113,
      1.7793838368690889,  0.16263297150207112,  -3.5748564142973773,
      -3.1753828557142283, -0.2066198201125129,  -1.3391292630588336,
      -2.728050402003271,  -0.27357791377165874, 1.1718270969604125,
      -3.6077034223413995, -2.060281147991121,   2.5938516518501045,
      0.963093133843774,   -4.077718507014567,   -1.6691976361834193,
      -2.7534517170057446, 0.13192045096313798,  -0.42246315373919874};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse46) {
  S21Matrix matrix(4, 4);
  double *arr1 = new double[16]{
      -1.772445843560079,   -4.762897530166636, 2.929439612060312,
      4.535234001437132,    1.5558519058330447, 2.3528548178068673,
      -0.44389064906373044, 1.6789495861464498, -4.8455249647211,
      -2.1914094452787936,  1.4441097709724584, -1.9451678181218646,
      -3.345640529684595,   1.5826484614910141, -1.5976605091675014,
      2.2760249261424477};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(4, 4);
  double *arr2 = new double[16]{
      0.008251531184200566, -0.052387991405089186, -0.15190694065986204,
      -0.10762198507111949, -0.06951033839049804,  0.5522248097067345,
      0.24424478618734496,  -0.0601113222398404,   0.06696225216762608,
      0.7570937717475849,   0.43792466337557723,   -0.3176480131342006,
      0.107468081898802,    0.07044285245872119,   -0.08573048106450612,
      0.09998876879951668};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse47) {
  S21Matrix matrix(4, 4);
  double *arr1 = new double[16]{
      -4.508762656408825,  4.120018320315692,   -3.382964887397958,
      -3.8948565617273223, -1.3688827301700601, -4.098670928541734,
      -4.694897461805443,  -1.9975225341850003, 0.30283243527733816,
      4.75941368047776,    -3.196850339165703,  -2.2330083166751824,
      -1.4502263938576965, 1.428281402505089,   3.922924403499511,
      -4.014434332836902};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(4, 4);
  double *arr2 = new double[16]{
      -0.2468275968090104,  0.06520701453857557,   0.24931028059617785,
      0.06835176549554631,  0.05131128125993773,   -0.1165535167146236,
      0.07544943106977886,  -0.033755941749681245, -0.013090342904016257,
      -0.07246379048891374, -0.07886928661956533,  0.09262795315373508,
      0.09463112041749809,  -0.13583635469813474,  -0.14029164072104458,
      -0.19528680639459392};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse48) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      0.6153475592053645,  -2.44310925402642,   1.499238996532652,
      0.6074126282585723,  3.7078282476191458,  3.7000496976551,
      3.3814393587202787,  1.5913131263903608,  -1.4618730747928241,
      -3.2907039918077405, -2.3732065846240094, -1.1010807452636207,
      -1.9414546051216295, 0.9741005529874203,  -4.580404263468896,
      -3.333805647771435,  -2.900914490717276,  -1.2845484319510159,
      -4.912905669888861,  3.3832729291683687,  4.207644944551779,
      -4.160895912721529,  1.9748369815540379,  3.5335256407999793,
      -1.7733631613592218, -2.2029032504441206, -4.89771247581877,
      0.4357297210207616,  1.3381409219602967,  3.74007747602608,
      -3.6372624707004917, 4.442259369647182,   2.098443179923289,
      0.3212039902181454,  4.905068109864786,   -3.6865717664826647};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      -0.004250708302639703, 0.20186734162418282,    -0.14997444905025986,
      -0.033563196312381374, 0.05450841070016183,    0.010828117643027206,
      -0.4169423587546401,   0.23463505814467073,    -0.4014820454229548,
      0.11174126288480764,   0.3012602114491484,     0.06408140205445528,
      0.06897472366321793,   -0.08537450732399314,   0.02358479024331463,
      0.0373072156592973,    -0.16839948283024062,   -0.0485770506233484,
      -0.32807634272598435,  -0.019098729574342593,  -0.3178795056050553,
      0.002338894405136108,  0.2022701856923211,     -0.0053619463188018905,
      0.21825992524881055,   0.05392206205381786,    0.06540146354713168,
      -0.05373228314970274,  -0.0026233497472054478, 0.12600127613999365,
      -0.19713850616641826,  0.10504841638503119,    -0.2630642218706672,
      0.11770817979057518,   0.2275122224319673,     -0.06519122105733989};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse49) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      0.8502589077574623,  -3.9149397146812213, -4.3863567614245556,
      0.3162817115931045,  4.4214446964144685,  1.5783839979998637,
      -2.5253960333978864, 0.5863732188077151,  -3.000644089323102,
      -2.586395531765265,  3.094078623827329,   1.6424703032084151,
      -4.091637429473215,  -0.5681436318436646, 1.909088780822195,
      -2.389992038734534,  4.968087961640066,   1.175227823613504,
      -1.2584781060431762, 4.864111686170668,   -2.640604566533117,
      -2.304933066688567,  -1.439589077738007,  -1.0504601420521977,
      -2.4609430791066957, 4.266869501299087,   -0.7478594601745439,
      -0.8182549036244815, -1.001697584281155,  4.886300515517409,
      -3.954027795504719,  3.1464309576512495,  -1.8883922524611343,
      -2.7835252490339215, 2.822273984172873,   3.4143720820411065};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      -5.29764175321732,   -1.3417939378882062,  -10.592495837941394,
      -8.541449476402352,  -11.168490817601217,  20.095734752184658,
      -0.6745436969403154, -0.947122587285361,   -1.6702883494660508,
      -1.1514042866582928, -1.9372119327959594,  3.7604496782775,
      -1.8551476418631199, -0.4811494758953203,  -3.3866189180719695,
      -2.8917682458268232, -3.670298001639527,   6.617600264471923,
      4.962104487513892,   -0.02421738817297965, 9.07074227966839,
      7.512994166863125,   9.400431075744917,    -16.54586776742256,
      -0.9325590070542521, -1.0086422334103446,  -2.258729087549367,
      -1.7681791223922547, -2.7129929691081593,  5.032321972288219,
      -1.723240382577137,  -0.13319538858283705, -3.3386661280669165,
      -2.843337566483294,  -3.272354284978013,   6.111018654849934};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse50) {
  S21Matrix matrix(5, 7);
  double *arr1 = new double[35]{
      -2.4286085377384414, 1.0868184797518694,  -3.9414408887680663,
      4.27944381594199,    2.666994336995332,   0.5433025403675646,
      -4.7229124291097975, 3.787100054143737,   -1.3323876099429066,
      4.113263623337264,   2.669879343878266,   -3.379638454991346,
      -2.0707395987116985, -3.665131769843817,  -0.8155606502090684,
      4.9182843582961535,  0.675687165169709,   3.053871610441014,
      1.000979830202871,   0.29739084435259766, 0.17994397618409597,
      -2.2135303706348832, -1.265195676765548,  2.2324518157741586,
      -2.185514754845601,  -4.559005023352631,  -2.860348118006092,
      -4.586239175049042,  -4.063818142626683,  -2.322229561875515,
      0.5447797168721475,  -4.142778618815054,  1.3296108825580113,
      2.8634251063291316,  -3.892743802122536};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse51) {
  S21Matrix matrix(3, 2);
  double *arr1 = new double[6]{-3.1986656776529685, 3.6018752537828984,
                               2.5581992239829443,  -3.1670728306252025,
                               -4.377831310748714,  -3.4638297680187824};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse52) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      4.599296155556326,    3.860035515105432,    -3.5953420428931837,
      0.8908415462084109,   -0.6713733086719973,  0.6869338302071091,
      3.6260330584563665,   -3.3788481549379226,  -1.6919400675299565,
      4.076284059472279,    -4.225471986317617,   2.567800654275655,
      4.7851715119861495,   4.856562940981835,    4.686812236296884,
      0.781355810182772,    4.711651942552651,    -3.3305486526834804,
      4.622489559173097,    2.268354766495655,    -1.3264187573727835,
      -0.77663060077621,    2.778808493226891,    0.750002155115272,
      2.431572137445385,    -0.32976153660951013, -2.97301110772782,
      -2.8196159449651925,  -4.530057919868518,   -4.688454185858982,
      0.48859337388278057,  -3.451328233285972,   4.5890255008739,
      1.6912994023286334,   2.46585738854713,     -4.951038861070389,
      -0.7470310858257134,  1.1452127789443125,   -4.676936206974634,
      0.013826786958923698, 4.375613410193658,    4.054042172293919,
      -0.5182671370424261,  1.4981887987087807,   0.5791061335426182,
      -0.22332929100916843, -1.9496147034140532,  -2.679468213771141,
      -4.104729239496365,   4.527777849589217,    1.4258361245081996,
      -3.7932588998314154,  -1.5739820573491348,  -1.1681443425198115,
      4.286446333558944,    3.3647580537920376,   1.2122626345701555,
      4.382284641745226,    -4.287667500729552,   2.001363696965722,
      4.773400173142175,    2.0408929734016654,   2.255593884287843,
      -0.9779047729726962};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.7192348125333866,   0.8825449543020845,    0.3260163326014536,
      0.6394798715902076,    0.16750482266555128,   0.4819935411143572,
      -0.05970430807536468,  -0.34035625563902194,  -0.16123253999095213,
      0.22238323372913169,   0.021032330333441464,  0.10965693204873005,
      0.0030915530516395094, 0.27692595657121916,   0.07265488062054204,
      -0.14485308959246768,  1.292397079705301,     -1.6388107287588427,
      -0.3824202133590324,   -1.1618032032876542,   -0.1805232437092423,
      -0.8357410785889873,   0.11873126661722064,   0.7280750066776169,
      -0.7811998863582946,   0.9944728184407648,    0.26403013742656445,
      0.6002709273851804,    -0.01754062039742643,  0.7061196487474448,
      -0.06264642358279811,  -0.5728304799566278,   0.8735175105421299,
      -1.3486531106753166,   -0.27545040280195965,  -0.8231320763357842,
      -0.10412212549502023,  -0.7822515530159059,   0.053117409242037054,
      0.9227435623784335,    0.30405468090469207,   -0.03579529948555871,
      -0.10966348793890061,  -0.22317943008887445,  0.04719855968276233,
      -0.14989547193419403,  -0.055875845353925924, -0.15647923496585003,
      0.6721046469761282,    -0.7551647851054843,   -0.13402985800614067,
      -0.49822051299286707,  -0.09573813216637678,  -0.5220505816081704,
      0.0741965194224975,    0.4143096933591025,    -2.430825227889995,
      2.911673855929981,     0.8329387287453396,    1.9737550191948368,
      0.3465477296786147,    1.6126302367944196,    -0.08341319309646918,
      -1.3250707311004952};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse53) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      4.393976497574865,    -1.027003562424802,  -4.5523309703904555,
      0.18535845751400082,  1.5950525057473666,  1.289483734767856,
      -2.7342659317218967,  -0.2660227491560354, -1.0957922887210305,
      -4.985332266975399,   -2.4273260990715837, -2.3962183376876753,
      0.6682030970613573,   3.8421450847677914,  1.2349943172817044,
      4.073286532081733,    3.8411867743683956,  0.5673094780107171,
      -2.9364193746658716,  4.510543139655272,   -1.8345455658489707,
      -1.8485938450834247,  1.958389137187698,   1.7194690304319238,
      4.680069239596072,    -1.163999344032348,  -0.28146736738041866,
      -0.46846824570077317, -3.882384741655054,  1.2350918389165688,
      4.9758853088569985,   -2.6798681366619226, 3.7885439671783576,
      1.6062088646534107,   2.6705948082024387,  -4.477424707570372,
      3.1808287277845455,   3.760831172394605,   -4.054961040174186,
      -2.3176576826612196,  -1.3391996918874316, 0.029860052223297018,
      2.0866425217224975,   4.953719491840744,   1.261437754213608,
      -0.6725013540413949,  -3.175837584324719,  2.0214696542935755,
      2.0314262690181817,   0.16893818613754963, -2.6059514239458736,
      -0.16232854146535658, -2.559803317837849,  2.460034858022768,
      -0.07146053342795078, -0.8488355436296571, 2.050561523452772,
      -0.5649703312664576,  1.997406551902401,   4.777401439787406,
      -4.9165960942163975,  2.697234767790066,   4.453890168287508,
      -1.9894785613671004};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.031636100274894496, 0.012715455194431697,  0.09255096416372753,
      0.18702334026515033,   0.07873728180350134,   0.12196735433572287,
      0.010083745389559444,  -0.11376948984847986,  -0.106704012531932,
      -0.04184584313280103,  0.23364077823865934,   -0.37623199096303134,
      0.13121279073387201,   -0.30523763219103994,  0.01990138973032912,
      0.16582126020878607,   -0.1433625962174094,   0.01594878032591828,
      -0.015336034237577473, 0.19765191674932583,   0.0671472868910947,
      0.20330330730068927,   0.0024511347722740067, -0.10036942286932314,
      0.1269824970697,       -0.022981758641531413, 0.012362747712677445,
      -0.15729734560291084,  -0.027857523465366938, -0.05245641904872104,
      -0.12236112279099046,  0.18989478292532821,   0.22366235475259322,
      0.015309799661964866,  0.07120805549420581,   -0.36227126918604924,
      0.06194147605701798,   -0.35218327234548386,  -0.43095714009797975,
      0.3048366632116736,    0.04149711881590459,   0.06556182282595015,
      0.04454509908533174,   -0.3014880842389868,   0.09390354266747249,
      -0.20727727270986915,  -0.0201857079458603,   0.26190204497397823,
      0.04410783873313257,   0.03637952519975053,   0.1288552097928858,
      -0.2549120064359265,   0.034626545640977675,  -0.34504109481125755,
      -0.2772493371816913,   0.25068888261870587,   -0.23904389896201525,
      0.11830865406445214,   0.21622004604628756,   0.03618472330060796,
      0.09616573935668132,   0.10742415388633973,   0.13034563956194603,
      -0.14881138537881927};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse54) {
  S21Matrix matrix(3, 8);
  double *arr1 = new double[24]{
      -0.5694380506819492, -4.947078974130676,  -1.3720136288222329,
      -3.9259705833283434, 2.779597445999534,   2.6370550910809056,
      -1.4255468098078872, 1.8949323225828287,  3.7950239580140472,
      3.1187400004008907,  3.3253903195011976,  2.6627225004430137,
      -1.0188514818949725, -4.104022087381542,  -4.693653281314749,
      -3.9030170003545983, -0.7351796055757207, 1.3735132921772886,
      -1.1670407229412847, 2.817560335078097,   1.4456232194718632,
      4.877228616316758,   -1.8701836481793843, -4.442922149438738};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse55) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -4.79297578564644,    -1.9656617016374653, -4.901370508642529,
      4.078373370260088,    2.6267554931345805,  4.534657576503033,
      -4.68580720122506,    -1.449487183233896,  -3.7352039164119133,
      -0.00783481124505414, 1.6885590385992924,  -4.01540125194275,
      -0.16564455423206592, 0.4555820633374621,  -4.636325328310411,
      -3.619193521204952,   -3.5836380602568916, 4.161698131101085,
      2.928648995247549,    -3.978018614004303,  -2.6113398729870827,
      -1.8780349646909933,  -1.3724119780443145, 0.5135048523772054,
      -2.835183295917545,   0.4426197375279539,  -4.4638548253258445,
      -1.570995419423844,   4.8879433283227876,  1.2789587183506903,
      -0.39269204985968553, -1.9304581035944568, 1.1771349475044488,
      3.991133439339027,    -1.1014910334390304, 3.2879714912556004,
      -0.12939971386133386, 3.1471190090803756,  0.18156225428549977,
      -0.08134154505253477, -0.3641326355761372, 3.757984764579758,
      0.5356840616880785,   0.7405877903011104,  -3.950334267424913,
      -3.6555268946297845,  4.414054487151255,   -2.015148786286826,
      3.935965533892606,    -3.4891932831043695, -1.0178322044864663,
      -3.3121152892337244,  -3.89302977097407,   1.3003491755511316,
      -3.4374190969825635,  1.4727982101016845,  -1.9172165714549818,
      4.74783940197468,     -2.9199105487794386, -1.0378094213223878,
      4.43171621389015,     -0.9690855332745123, 0.34489144949603645,
      3.2804586029228773};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.08726998651033635,  0.1875923336065786,     -0.252710929876069,
      -0.11843898094083333,  0.07213661073332632,    0.050203439949441424,
      0.06295792603108977,   0.14262451382760966,    -0.029738068347283313,
      0.10663235078478675,   -0.04720011094590617,   -0.0547975385927821,
      0.11478388474610564,   0.053356970616624054,   0.007621078383899038,
      0.11184592298719498,   -0.06525898704621705,   0.018673154078557543,
      0.050644483560626105,  -0.058737182313923005,  0.02667043617172661,
      -0.12288272159163195,  -0.11360343299970682,   -0.07454713327940701,
      0.07992056892609778,   0.09709509607151559,    -0.16430579602439138,
      -0.20961198639830497,  -0.0060684736984777275, 0.07042571531162785,
      -0.049207605609281606, 0.11000656969336364,    -0.061969782138768185,
      0.11548277463917635,   -0.1435487752787146,    -0.03548739792617031,
      -0.005945955471141757, -0.06017986932391948,   -0.07754605973688382,
      0.09931258283281358,   -0.03443344061988246,   -0.28250264757846966,
      0.32720445844731055,   0.29399027231733926,    0.1587983518575113,
      -0.20349117351648896,  -0.02095217740166571,   -0.31675983168658234,
      -0.05379926018261508,  -0.3173546148096944,    0.2638727674794965,
      0.2890172892534495,    0.010159061645548674,   -0.08203232711094964,
      -0.05964728899910647,  -0.2684825383017917,    0.03843562203269264,
      -0.20345668158879354,  0.17656229616520133,    -0.0041017654842324626,
      -0.048273853251975474, -0.10516991310114614,   0.013921791888671865,
      -0.004750777007751791};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse56) {
  S21Matrix matrix(6, 2);
  double *arr1 = new double[12]{
      0.9083342870102058,  -1.304742601142761,   -4.074368430094559,
      -2.936647277897925,  -0.43406500093932987, -4.160471493712152,
      3.736591246857877,   -3.200941265508498,   2.434828278824285,
      -2.9872126649616892, 3.9336991711350535,   -0.3285803977206285};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse57) {
  S21Matrix matrix(8, 2);
  double *arr1 = new double[16]{
      -0.2950831864664778, -3.6186891241924646, 2.444473229688829,
      -3.5526246305524776, -4.693073153672832,  2.727659507488446,
      -2.1559114300123317, -4.535900146815392,  -3.8689511979949587,
      -2.216584914706776,  0.2370316851557508,  -3.6517905117996587,
      -2.1828253613201056, 0.25330482927596965, -0.9086940003068449,
      -0.01881662636875614};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse58) {
  S21Matrix matrix(4, 6);
  double *arr1 = new double[24]{
      -3.551982990027013,  -4.070367110428309,  -1.7028426511278871,
      -3.478000079512571,  -2.8359832826644804, 1.8642159422832663,
      0.7780131804418282,  4.561591982827656,   2.972290459822088,
      2.956096783807064,   1.402533297923524,   0.5027511673624208,
      4.7373721226364705,  -2.106581130091638,  1.7254566941022738,
      3.4712481021592687,  -4.017972389289196,  1.2211494344934062,
      -1.7906691261612062, 1.3745636290362686,  -4.020855730882346,
      3.7301031361794212,  -3.8853405009680344, 1.2534525949992013};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse59) {
  S21Matrix matrix(6, 8);
  double *arr1 = new double[48]{
      2.432251103677661,   -4.940685402864011,  -1.2875651365780714,
      1.9164371921895063,  3.9160054565566185,  4.249370017038764,
      0.585673774486021,   -4.250057763439841,  -4.124251845885595,
      -3.5249962861082427, 0.7631820743092899,  -0.25583673074345015,
      0.8568363630954341,  -1.3476735414523535, -3.1569179128987845,
      4.733715428808475,   1.5428772061746656,  -3.8949094753772795,
      -1.2571158457372311, 2.9580244840543566,  -1.0853172172181837,
      2.26892946790196,    -0.7759816982220533, -0.8266388482415943,
      3.996348642851151,   1.7744680035526148,  -3.1944884922697714,
      -1.4323894551445182, 0.40294059199249155, 4.570442473835655,
      -3.665851120097532,  -2.9813853260907552, 4.610755419591431,
      0.45186738691288575, -3.536984644911917,  -2.637640733921065,
      2.88383577070414,    -2.625337639703659,  4.696186587982028,
      4.069208758508994,   2.796578486542767,   4.806216366293572,
      4.957328587237889,   2.181698446045499,   -3.7863664080648385,
      -2.8635078031883654, 1.4580563930764452,  4.818033954955478};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse60) {
  S21Matrix matrix(2, 8);
  double *arr1 = new double[16]{
      2.8146083043747865,  0.3181140363745847,  2.377705779041567,
      1.9621462903639788,  -0.9628494818314826, -3.028510229359944,
      -0.7893957183113729, 0.46529831754957396, 2.8983482078746423,
      1.491339866968751,   0.1828982834685977,  -4.390518369229826,
      -4.6722581569552135, 1.3937729022885765,  2.1303439570780327,
      -1.2425662929151668};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse61) {
  S21Matrix matrix(7, 8);
  double *arr1 = new double[56]{
      -3.5957642168409807,  2.1403921261213483,  -2.656989659611888,
      2.2630415381057336,   -4.726348708093981,  2.2838051187697115,
      2.449855759225769,    3.3626445452677896,  -3.5086963971959673,
      -3.3553261224495943,  3.810317291763134,   2.354936884599258,
      1.7300705925035151,   0.2526191874800272,  -1.88530489867488,
      3.1462436042175295,   -1.9083718144235364, -3.6751677035215344,
      -4.118073970206307,   0.3068456622586302,  2.700143895199849,
      2.3303294420375122,   2.8348271876390267,  4.895731452735577,
      4.781769921394401,    -1.1844508809806795, 1.6105307003741176,
      -3.0374065733695788,  -3.738878569518601,  -3.9695510558188274,
      -4.878381641934357,   -4.454977983665842,  3.7443423198848915,
      3.5180673861063774,   -1.4652732826580062, -0.29298725830517114,
      1.7706655702403467,   2.1749543419358,     -1.0505195458469831,
      -0.9260615950631879,  -2.455690403503852,  -1.0112594651192275,
      -3.962007094329926,   -2.3860939687288827, 0.1713253865122084,
      1.6865257371126674,   -2.6444869361889434, 1.7166144039494657,
      1.296305077308019,    1.2939136041790888,  3.6179743514063123,
      1.6371738007244048,   1.4211899755717736,  -0.09991632126628591,
      -0.03685223082487088, -1.1086747681305775};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse62) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -2.5161733460992117, 4.064897990658922,    1.4711093686110344,
      -2.0451689843342393, 2.7088869750095625,   -3.7369753681611595,
      -1.0560378185226957, -4.907484621448953,   1.867474173278751,
      -4.7254110294438325, 1.9960295307407723,   -4.960103986303394,
      4.374952106517917,   2.81337914691146,     2.6153746356682275,
      1.942258711385958,   -2.7321510004504876,  3.315855152911606,
      -3.0943445851678133, 2.6249261973632123,   3.6374733165856945,
      1.7363592140858577,  -3.171742975010079,   2.3332635972706717,
      -3.827549817048508,  -1.3673533173460783,  0.12371660398738094,
      1.2962127256173792,  0.6334727265204387,   -1.0728534503906784,
      3.164782585398143,   0.7727190867706755,   -2.3418729945284067,
      1.7730117321888619,  2.5479649255523187,   -0.7483089959605058,
      0.376267035829418,   -0.33680312681196156, 0.7394261006205314,
      -0.701079190091761,  -2.6407738377069867,  -2.669242342621975,
      4.092623424908362,   -4.85421315125935,    -4.697413494790097,
      3.365758127077193,   -2.6645670145670386,  -3.565673101015677,
      2.255822992822422,   1.8703384628988529,   -0.365144984669036,
      1.0734611788098958,  -4.422038224777026,   4.901753057981669,
      3.707862837980727,   2.6469985390076527,   -3.1443637715125106,
      3.273117554635615,   -0.5592518062386018,  -2.273543463763763,
      -0.9398201214906887, 4.968020542972374,    4.280347488946623,
      -2.703453373119009};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.3802508478467272,    -0.0761827460841886,  -0.17595865537475308,
      -0.38589176164596956,   0.3818348502334868,   -0.18599962446091753,
      -0.3217473353407765,    0.20463359942225526,  0.4707797096167222,
      0.08498886624050467,    0.15205259894521284,  0.19248856091934807,
      -0.31300260512919736,   0.10124724487313008,  0.43965017209108537,
      -0.22917985117393314,   -0.8491324396642097,  -0.1816941276946345,
      -0.2653905036838849,    -0.5842364017702524,  1.142595123622889,
      -0.2666354115045428,    -0.702688708684699,   0.38217778877835973,
      -1.555053772778559,     -0.43248437554476027, -0.4397322029293997,
      -0.9572986004068457,    1.594256117236013,    -0.5339397927813386,
      -1.352038377756854,     0.8259743883104392,   -0.6223969691208454,
      -0.08873573362595365,   -0.146089316448746,   -0.44300042441480564,
      0.688919285159892,      -0.2631396405659764,  -0.6202711185214937,
      0.3744478320162448,     -0.8629417120742073,  -0.17502896190857506,
      -0.1813248092140107,    -0.583197484220016,   0.8413997886093871,
      -0.24115702989349053,   -0.7163847752224618,  0.5159789563688922,
      -0.021144142682475567,  0.0097426105029564,   -0.08547594476216396,
      0.0503669850835529,     0.031190994191577455, -0.07295854397551213,
      -0.0016649322379646088, 0.07251493037566585,  1.0927690882294536,
      0.3174308562717215,     0.39569389785542897,  0.7698334474502567,
      -1.0440688413105725,    0.3759040997746107,   1.085433115177813,
      -0.7262295818874647};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse63) {
  S21Matrix matrix(8, 4);
  double *arr1 = new double[32]{
      -3.9945984616772625, 1.1859741667492916, 2.6067565184671713,
      0.1272731873449473,  1.6726042428569174, -3.749690221155416,
      0.21839863776292123, 2.513812769167785,  0.7014911892736624,
      -0.8671830098023374, 4.955831867700045,  -1.176529337093395,
      -4.160582945128536,  4.370998234320405,  -4.007233200911936,
      -3.5543811193033825, 4.957962325748387,  -0.8793968368352747,
      -2.087950968165322,  -4.981374679600555, 2.677165539023088,
      -3.183081722207782,  4.897645099325086,  0.9098798115373539,
      4.9864727928825925,  2.7129614261391897, 1.4368360180807471,
      -2.113296179105454,  3.1866553616884534, 1.223592266616155,
      -0.7841048782403846, 2.2571106052289567};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse64) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      1.985638194433447,    -4.223222255124293, 0.6258527369911073,
      -0.20452023552720533, -3.196611541949217, -3.705936506834097,
      0.0873018938859147,   -4.753005857636321, 3.5502600314157924};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      0.49571161881652814,   -0.20570581324049195, -0.30211171769376705,
      -0.006889999467924184, -0.11971941265976009, -0.1237544329259913,
      -0.021413859914867342, -0.1552192114631176,  0.12341895428413431};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse65) {
  S21Matrix matrix(4, 6);
  double *arr1 = new double[24]{
      -4.784650224729652,    -4.390099351715438,  -4.417645277074881,
      -1.2708836576823703,   -4.773723254596325,  3.897077215906682,
      -3.7985863457197433,   -1.4333596416693881, 1.9456523613806622,
      3.371615451349232,     0.6021001123914447,  2.99717044868712,
      4.68250958500645,      -4.715861808428849,  4.5231346222378175,
      -3.584301215883875,    2.82042444512435,    4.373528557632019,
      0.0008815668323824966, -3.924095826999837,  3.0022390197083,
      -4.203205616005528,    -3.9576464198582273, -1.3851931303349598};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse66) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      -1.2124515994142548, -0.5681630337608059, -0.3876672147698903,
      -2.6218178364381153, 4.984430431003867,   -3.2244291061162187,
      -1.0057000419319095, -2.578437177092522,  3.2667590307455114,
      3.795940528586444,   -3.0431240838008566, 4.836893576919319,
      0.15968935916758387, -4.250738518032094,  -1.1429719246092818,
      4.772482692144971,   3.322678042646947,   3.9184546476533484,
      -0.8962841221814308, 2.6116656589190246,  1.9566452677378994,
      2.5896202339015613,  -2.6173239254265246, -1.0039564039026194,
      -4.486737127900935};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.07552004515006075,  -0.03461731624636104, -0.11974459242008839,
      0.07595603810294518,  0.12932685924898568,  -0.08041129485167876,
      0.1324807994623597,   0.11252155074550975,  0.11565148751921482,
      0.06140738090303266,  -0.13485404429108383, -0.08843322196096873,
      0.05990872373898776,  0.0343474869266248,   -0.21989870645297332,
      -0.17892483251647975, 0.1509176828056147,   -0.014112734527416784,
      0.06069662110450902,  -0.03216459690103882, 0.10522583724147629,
      0.07918555383883734,  -0.01906542970434256, 0.06625687786737905,
      0.0044367613431133416};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse67) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      -0.18114279231571473, 3.151323538951452,   0.2376653120437675,
      -3.1196420534076474,  0.30876445065737457, 1.0726217673683678,
      -1.8884208655669443,  1.0422037990783517,  -1.8468739946584787};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      0.0678835431957576,  -0.24399837630048427,  -0.13297301648973314,
      0.31313711470087896, -0.031500509932758554, 0.022001337155815575,
      0.10729480828000372, 0.23171135393272868,   -0.39307560019494436};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse68) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      -2.225847312637812, -1.043549249044883,  1.9723967246067549,
      -3.617168183227144, -4.222177871490632,  -4.4089258227271575,
      4.691388604651012,  -1.5759841938408217, -0.6772054181748999};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      -0.04893886854098889, -0.04566018385016801, 0.1547322227776471,
      -0.2768642083455267,  -0.09270384345020527, -0.2028360741975298,
      0.30528752494667477,  -0.10057491034063219, 0.0672992748791558};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse69) {
  S21Matrix matrix(3, 6);
  double *arr1 = new double[18]{
      -3.2391531814240846, -4.87697534238265,   2.170270708123521,
      -2.672037621662735,  1.0930307175384666,  -1.3879852143880136,
      2.012586472493294,   -1.5550696225052905, 3.668228729709874,
      -0.2918344099734913, -2.233121468441217,  -0.961539062987482,
      0.668785930714213,   -1.7717737402877098, -0.683451466114203,
      -3.666396276158811,  1.0151670058822235,  0.6350660318485328};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse70) {
  S21Matrix matrix(7, 3);
  double *arr1 = new double[21]{
      -3.433947292026364, 0.5376628864532247,   -0.31603624949323006,
      1.801865716774012,  3.569109148025106,    -3.6071738279156396,
      3.1882568581760857, 2.2218090857326462,   -0.16976851115497738,
      4.904828092661127,  0.24534473985781524,  0.3566691865178937,
      0.076160882193685,  -4.485563594534003,   -2.416862496763208,
      1.8990630708952096, -2.474586278595642,   2.765735748291357,
      -2.97334346336787,  -0.41388063974600797, -3.4718889019187706};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse71) {
  S21Matrix matrix(7, 2);
  double *arr1 = new double[14]{
      -1.2648053963275063, 1.0489778126342673,  1.8726623405820275,
      3.3665147915417357,  -1.7510711861655324, -0.13828372001211342,
      -3.240098360458219,  1.1780908592396884,  -3.856353124976206,
      -2.3663668219781853, 0.7912540467544558,  -2.127088964374042,
      2.5025508997982584,  -1.7523387731165965};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse72) {
  S21Matrix matrix(4, 2);
  double *arr1 = new double[8]{-2.87159121438749,   -3.7297302494979814,
                               -3.5558700908546035, 0.06055775751303827,
                               2.123934467004384,   0.21518549738939186,
                               2.677553800867308,   0.9624528190214718};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse73) {
  S21Matrix matrix(4, 7);
  double *arr1 = new double[28]{
      2.483672439441115,   -4.388692148067933,  4.054796439131405,
      4.952145382376122,   -2.6408893586117568, -4.051764114808012,
      -1.8331226811155599, 4.170358862485026,   4.9113840325172315,
      3.978065597016206,   -3.852923457302273,  -0.6258037643951209,
      -3.9561206567046305, -0.6574612038117902, 1.205823843731423,
      2.082910597276081,   -2.9781199438436303, 2.513540382323942,
      4.469540012617191,   1.6281326395236064,  -0.41263003576275636,
      -1.9530186363801016, 0.38970231125588484, 2.0322446689973663,
      1.0834014199639466,  -0.9411916310433464, 3.9856602121030438,
      4.050798500062708};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse74) {
  S21Matrix matrix(4, 4);
  double *arr1 = new double[16]{
      -2.4197036611802467, -2.816389923772996,  3.1955741443695835,
      1.0212598852557946,  -4.728280845828126,  1.3963934825888158,
      -3.08544760286925,   2.250149376038025,   -4.0771622218381385,
      3.129005775945629,   -2.80776971000578,   2.514765271063406,
      -4.725635695218557,  0.07454345314841149, 2.407296640984786,
      -0.51376260384232};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(4, 4);
  double *arr2 = new double[16]{
      0.03821835580534201,  -0.18699849546186104, 0.12139785774067023,
      -0.14881689912732404, -0.09123437245794702, -0.400868718829082,
      0.41421386014367995,  0.09043501344930947,  0.15136983991060507,
      -0.41082051629137845, 0.3181788771482682,   0.05902649775060352,
      0.3444882018746385,   -0.26308302970863473, 0.43433644671127236,
      -0.28789546061514276};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse75) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      3.3185206230411843,   -4.548924972376459,  -3.2876638861117327,
      -1.505070306072791,   -0.6316218440838153, -2.924070214913118,
      -0.04270828114610126, -3.5186088171927556, 2.8348659577322};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      0.15609462828682918,   -0.3161325883220209,  -0.145053494370549,
      -0.056750182447424795, -0.11975542620546704, -0.18933833493618302,
      -0.06808616772164501,  -0.15340195427180595, 0.11556013043530872};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse76) {
  S21Matrix matrix(7, 2);
  double *arr1 = new double[14]{
      4.764950146150607,  4.855642724842234,   0.5578791144617989,
      -2.570206945906434, -4.083784226430013,  4.403709053577659,
      2.628639756651202,  -3.4151811344101537, 1.4649042550077338,
      -3.441262142138343, 2.513189871336447,   3.3391699024095534,
      1.7968944642941942, -0.7302197796051519};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse77) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      1.310078138232904,   0.8425128242039346,   1.9326041703209818,
      3.5282662346515608,  -3.462858012502065,   4.366647858869632,
      4.5117415585162135,  3.444393324971596,    -3.53933515192539,
      -1.0373516026252827, 1.095909375049593,    2.139824279944861,
      -4.102475348503333,  -1.0172094030714374,  -3.3931726396208948,
      -3.929271788659323,  4.912397495509969,    -2.3159061850573,
      3.9438557430859724,  0.029172525030967122, -0.2674464208268459,
      -2.6796836743063723, 2.5531204876001388,   -3.6573837970778733,
      3.0371912802523227,  -0.857316727932611,   -0.8315485043932656,
      -1.358944672471888,  4.0084358260942565,   2.0894157844803853,
      1.6526810320821141,  -1.0423380479015796,  2.8347488397097633,
      -2.3071958791749947, -3.546362341445489,   -0.6473775075586019,
      -4.3465526587852175, 3.9266395303509665,   -2.1906631785090482,
      -2.0234266754549726, -1.629652227714522,   -1.5986216447558608,
      2.777154381855751,   3.4778081304369355,   -3.9893133860728702,
      0.9199822140339453,  -4.99358658942736,    -0.014702249372603227,
      0.10476762425296648, -1.9941177559707457,  -0.3135499326426956,
      -2.0331785892727963, -3.536259976325659,   0.527627165900225,
      4.983747421884676,   -0.11114284961297383, -2.7357347395136387,
      2.3511905076164457,  0.36203424956315367,  4.482164198924227,
      -4.653928954154404,  2.33787053420002,     1.357796158779049,
      -3.0361647816899984};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.013927639486625471,  -0.1208098503359529,  0.11317771575113075,
      -0.1074700658167848,   0.10568325909432873,  -0.03266254042599075,
      -0.10518779718914449,  0.006284757297626843, -1.5635679802640865,
      -2.5393662665662187,   0.09976812718866311,  -0.10475722534670902,
      -0.16944539770420697,  1.592790798391676,    0.7816370334609419,
      1.5049211486749197,    -1.5419402209163013,  -2.4388694064713987,
      0.1057817293984769,    0.1325935267861119,   -0.3003780761494572,
      1.8283946762012582,    0.9584306719298239,   1.3903162623396101,
      2.0454372511274506,    3.1313401506933394,   -0.061265279270375554,
      -0.07270106662099377,  0.25461524036309974,  -2.1839007884770103,
      -1.26485084510325,     -1.7460364117374518,  0.4338591438468114,
      0.7264306418024732,    -0.05319182678806563, 0.14951114389273867,
      -0.017168904951736716, -0.46890225259265,    -0.28591184862050956,
      -0.4109951898711751,   -0.9868176479612318,  -1.5780553625102645,
      -0.03338268086370186,  0.24137653165716946,  -0.13757061872096799,
      1.2033759539695814,    0.6445400759715652,   0.9423577249052388,
      0.5333582898055802,    0.8042867912158117,   -0.01621032048294081,
      0.017072432020147823,  0.018277104058546323, -0.6062554707252482,
      -0.21599778979762865,  -0.4234737212386141,  0.42599540004757,
      0.5053112072072335,    -0.05396890263532699, -0.11148130079685471,
      0.042177400905360075,  -0.3688687066897069,  -0.21492813969909338,
      -0.4152130105591811};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse78) {
  S21Matrix matrix(2, 2);
  double *arr1 = new double[4]{-4.902839956287764, -3.9512507717037626,
                               -4.781098803442622, -4.807593228170607};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(2, 2);
  double *arr2 = new double[4]{-1.0273645265775675, 0.844367375899097,
                               1.0217027680165238, -1.0477183928669958};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse79) {
  S21Matrix matrix(7, 7);
  double *arr1 = new double[49]{
      -4.517446962218875,  -4.184921318998114,   2.2342766636525244,
      -1.343436494123753,  -2.2334505692566378,  -4.546837483185645,
      2.535311420760916,   -2.827733758300275,   1.0712336961008848,
      -3.12489082830544,   1.2555632708195716,   -0.7789389909501567,
      -1.8800166070655622, -4.812961492453857,   -3.5315477629665457,
      3.3881523351631255,  3.1981497032320956,   3.6306606432722237,
      4.709390093237673,   1.018349158110543,    3.738435626470631,
      2.3109827341459512,  -0.09274506977833585, -2.6480891398892825,
      3.7232044264670776,  -3.816606118363194,   -2.4754323564256433,
      0.19562586376172053, 1.7292260389921479,   -3.6054850064076693,
      1.4845038406910094,  -0.00834775221148032, 2.9003136793552775,
      -0.9797144067850088, 0.29381698247799015,  3.576989773829874,
      -3.570749856530322,  0.7693640698602886,   -0.5403692351171401,
      -1.087177108215963,  -1.5984502509338459,  -0.4034453159548814,
      -1.7923361375185953, -1.0458954172672383,  -4.656609033545902,
      -1.5044354787274585, 2.1990484228296783,   -2.770645904718394,
      -4.041383640233502};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(7, 7);
  double *arr2 = new double[49]{
      -0.08522290961554613,  -0.08852794241432,    0.1356342365312268,
      -0.024570614312674228, -0.2644088371421881,  0.43640856325064037,
      0.11345455408800055,   -0.06498215147691276, -0.06800105037801996,
      0.333152051592903,     -0.13338094912877616, -0.682239233389334,
      0.7195736992963643,    0.22050593297678675,  0.0023616627308804196,
      0.14067820902754108,   0.19656582906720294,  -0.18870298537485936,
      -0.27822307805348445,  0.5312953951042886,   -0.066623974935779,
      -0.009966000839533303, 0.15376682553678478,  -0.082706700752316,
      0.16371804236188764,   0.39282412999721356,  -0.36504621442493634,
      -0.19295676991974403,  -0.04387944472344466, -0.05602407334003165,
      0.10491948359096401,   -0.03566013189670118, 0.013747018206553507,
      0.08397977222409761,   0.12713720076183133,  -0.02322408081433543,
      0.06812336542803338,   -0.3840106511913846,  0.09068538887571519,
      0.6484407466908068,    -0.8826465222865386,  -0.3112774502778716,
      0.04764734015544653,   -0.23966228629118824, -0.021717093159415526,
      0.1203247955383593,    0.031100388562672242, -0.2052414838524669,
      0.07635464810016987};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse80) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      0.4183681922108722,  1.93394710717725,     -1.2327032160923581,
      0.272781779425344,   0.003594121395092742, -1.8124306354608812,
      -3.6975602345682743, -1.0627625816724562,  -4.97625722733571,
      -3.839938278828845,  -1.7033131510572175,  3.159776033811424,
      4.2135363324568225,  2.967707299192295,    -0.684298176722554,
      3.0118895630974762,  -0.9295130441275035,  3.624789375546948,
      -1.2030037291250761, -2.788155578171332,   -3.317877813388285,
      -1.52410302968332,   0.022596110040868922, -4.048546078166597,
      0.4974947191865091,  -0.2639817075307418,  -1.7313359699751452,
      -3.7530473589364655, -0.23799811634573143, 2.8821536057449917,
      2.8860681264936137,  0.08397469844572036,  4.731399968006494,
      -0.5699784768551872, -1.8071231082044967,  3.3632818780386273,
      0.8633620726477158,  -1.9934139020542654,  4.822012911704563,
      -1.1691778715491519, -3.292595816017727,   4.454072053404449,
      -2.4512367672164794, -4.929714019066651,   3.485558879375855,
      -4.439698903865964,  -1.6209071372481052,  0.15275902226208782,
      -1.0973798726307384, -3.285894026000319,   -2.6995354371373335,
      -4.980799128489162,  -2.8476819277459,     -2.067204444776504,
      3.7674990908022252,  -0.7955617183410357,  4.330142390843994,
      4.552050841700405,   -1.2633949392606603,  2.5106869580078985,
      2.202510431923411,   -0.7045845870222429,  2.7375561764044134,
      -0.7118004089115528};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.14069746512053385,  -0.1062586417201805,   -0.11686242687692146,
      0.13887704942964615,  0.10557837136082285,   -0.0025723294692130464,
      -0.06524975954671838, -0.07966397236554972,  -0.034507373559641466,
      0.02879632585899166,  0.013715879189075152,  -0.1407058675951671,
      -0.304228611124502,   -0.06306081502798272,  0.16405182094964021,
      0.3815821073166874,   -0.2744269289695579,   -0.13297129480436753,
      0.03167334490976233,  0.01827553920344822,   0.18805215017733562,
      0.11636808356166606,  -0.2743997568689453,   -0.30813229398047964,
      0.007742941077864363, 0.09535568621631749,   0.03467601411394498,
      -0.18491412963088233, -0.11490733612052183,  -0.10646970892991767,
      0.11425273046056046,  0.2110762292469124,    -0.08061334992463726,
      -0.03983445261202885, 0.044040071231419176,  0.2792313607363348,
      0.47995271723916416,  0.24238354819341154,   -0.43857843155685383,
      -0.5118873435523427,  0.019983280006905073,  0.03665960520844777,
      0.05211918430779965,  0.18498493580235859,   0.004212324334994584,
      -0.0495750018848254,  -0.11284825176263281,  -0.04076409725381163,
      -0.21061941232794765, 0.024036599024940354,  0.045706960900747676,
      -0.07178158683887663, -0.027818858390156145, 0.001261112916331309,
      0.07024648731398875,  0.11518939938683916,   0.0703797084336131,
      0.042999102907738444, -0.29664099411266526,  -0.33482315351386394,
      -0.6684429551930264,  -0.197093316664209,    0.5670140851077063,
      0.74162070069524};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse81) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -3.3070680908722783, -4.767352469233471,  -4.00109160365205,
      1.0490611719244027,  -1.3046731916065015, -2.2410123972269202,
      2.0359144397530304,  1.971068684866509,   3.6604351797739536,
      4.233234972987201,   0.3905368993519165,  -1.1372700201152397,
      0.04704268219537333, -1.0426835169109925, -2.734131041978465,
      -3.373217610406213,  -4.0144574979557515, -0.9615516553850423,
      -2.7799776130238465, 2.299201875421999,   2.155805040212675,
      -2.366630639094478,  -2.3068107753015585, -1.9402144575669142,
      3.0654254058621238,  -2.225206556667768,  4.363479759234149,
      -0.8460485988342583, -2.1917977171927605, 0.016864163100271945,
      -4.221150728524806,  -4.213226521534208,  1.336286808367122,
      -3.109547819677493,  1.1736786446840677,  -3.821765453030699,
      1.563782239634211,   -3.6102333805958375, -2.2235401409894653,
      -3.0141123908873855, -1.3782592314265685, 0.677618333312271,
      3.2795551857327503,  4.5334294720258566,  0.10811928990611719,
      -1.3582743854216428, 0.588200174175542,   1.4019797587923657,
      1.4748378640725965,  -2.914401411025489,  2.940993045453915,
      -2.1567663075548005, -2.1166672315153345, 2.1760822080441535,
      2.1474304016771395,  -2.367345989409617,  -0.4316563178398436,
      -0.5416680373283436, -1.8252065504153645, 4.388968548053283,
      2.9306516475973883,  2.089965164364153,   4.171101184973567,
      -4.843986603520067};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.08263725091057124,  -0.024900260446284624, -0.30542045162391657,
      0.1542902679989041,   0.06939351174015826,   -0.047841350100923365,
      -0.297209824485572,   0.12732592174119417,   -0.04520240940626912,
      0.1690447777185476,   0.10325229692304906,   -0.14156407353321057,
      -0.06339070007644144, 0.05588732470296481,   0.1438369023972814,
      -0.069014246689184,   -0.10109558276426901,  -0.037807208842310626,
      0.03956836599283099,  -0.038191977747020975, 0.04441174988930603,
      0.12428449089080303,  0.11664191741346569,   -0.04610737304907773,
      0.0658165938821273,   -0.024309734847865604, -0.0832692079168179,
      0.1312779030456052,   -0.04830407943959163,  0.05678533469605452,
      -0.16799244461737706, 0.0914721120428896,    -0.15580005972516028,
      -0.20395133139194757, -0.07693834063452464,  0.003925368458374562,
      0.15361179092909016,  -0.04470454948806221,  -0.21209440359551393,
      0.10116476739948063,  -0.12752946136717552,  -0.1771673043805553,
      0.00789986959181316,  0.09278399579284222,   -0.10565531556030908,
      -0.14863697246722193, -0.05051608754538529,  0.035026343073876955,
      0.05393886142930763,  0.10092249737967825,   -0.03283198618790667,
      -0.15874396633014515, 0.03841965575374235,   0.08813473536114383,
      0.16550815671392666,  0.02360781139009347,   -0.007419982387566388,
      -0.13739351499350896, -0.1460971703191275,   0.041132496264211546,
      0.020837352628571698, -0.012650289419506853, -0.19335910402524403,
      -0.013171263866191031};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse82) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      4.412074006042637,    4.769350035345646,    4.620110907022136,
      -3.0231188586933033,  4.752210179662299,    -3.2539625595652923,
      -0.9583807762225245,  -2.902440040192001,   -2.4915441609590805,
      1.6923791706182643,   -4.144578688707047,   -1.464428799236972,
      -0.5144971199081896,  0.24174170483092894,  -2.2862068417643764,
      -1.557242543325903,   -2.5483449876703856,  2.3058622141859084,
      -4.157193836392685,   4.319615558773815,    1.3679797913291702,
      -2.1204730690666196,  2.1087504232620393,   1.232000006768308,
      -3.670901814651668,   0.26196974367138637,  2.1647470954405756,
      -2.5512862548278092,  0.8590801874640066,   -2.8942670952209157,
      -0.14575719036472368, -0.74337977513495,    1.44635496208077,
      3.931490499170682,    3.3027693945996397,   3.38116960666542,
      -3.1988373861759243,  4.069663871140413,    -0.42292608618279903,
      -3.5569007897672025,  -4.567892052365073,   2.3492505424611494,
      -4.381427330084796,   -0.20207764468005074, -2.3482099117325084,
      4.171828698914231,    -1.5624955482798395,  1.210312466846717,
      0.4802649271201842,   -1.1400711128747298,  -0.8466189281040357,
      -0.2130927657243662,  2.995249324091164,    -2.0183336570015555,
      1.3330900871389737,   -1.2775827875954269,  -2.866414607630925,
      1.586845676830504,    2.080937028061827,    -1.9110420520890727,
      3.7006130232387555,   2.6239639373734533,   4.654348162991884,
      2.6278256679948147};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.026483265967993615, 0.3613047870918751,    0.011797834338728648,
      -0.21531890620107139,  -0.02149429207917171,  -0.3879164267714951,
      -0.3109461511380378,   0.11681216835913695,   0.02054208748373432,
      0.370786909306162,     0.1090232517643912,    -0.07713841679235027,
      0.02091103082377234,   -0.3084361962228299,   -0.3972842276021487,
      0.14669416253723297,   0.08121961116937226,   -0.44756164169232093,
      -0.04900511515626544,  0.1605360077143541,    0.025777488818571472,
      0.3277961014805058,    0.2067194775073464,    -0.12270979374665311,
      0.1178291405043455,    -0.7518420490609381,   0.03640703187339779,
      0.12784926649682177,   0.03437182362303167,   0.6494096243954541,
      0.533889039019583,     -0.2893134328964305,   0.2424257953611228,
      -0.9431444251184626,   -0.0793738817526747,   0.13725300948795197,
      -0.04784152989930354,  0.9468276905225315,    0.8495592762042704,
      -0.30291247571294744,  0.057714127598252646,  -0.362385251030193,
      -0.11384956818058711,  -0.015782260528442747, 0.03503353741373243,
      0.42505865512721175,   0.36408668621827617,   -0.07343393097087726,
      -0.2822269705005351,   1.094150652865133,     0.11030150181063562,
      -0.21561233051115838,  0.07744017747055762,   -1.1135242411538033,
      -0.7390289727362703,   0.48234797652000133,   0.08093122094897497,
      -0.2700507045013804,   0.042412983207276586,  -0.018075716008748965,
      -0.1362597087652008,   0.1902658292975953,    -0.1256932527280732,
      -0.048273085883369114};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse83) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      4.394518193509342,    -2.9271467712761168, 4.849467700843267,
      -0.23240962214041705, -3.1047124671199966, -4.863990650094669,
      1.1734404018003843,   -1.040538659372098,  0.03144052403808306,
      0.4511438287228522,   -2.109625002155495,  -3.372392412363144,
      1.8786059583745978,   -0.8368791727802343, -0.4482510527017798,
      -2.5040437014437558,  1.8323808393153111,  3.5147132963835954,
      -1.048047676793077,   -0.3492087114205997, -1.3068815275550447,
      4.172106655420285,    1.7048735191678759,  4.5628590087895144,
      3.6252416249880834,   -2.9738654778431064, 4.55169897994468,
      -3.9209153962668477,  0.5821136871347212,  1.4274380145674117,
      4.363146412088186,    -2.6068471352102818, 4.027384869730653,
      -0.9202903235984969,  -2.4318866752405857, -4.921053626474164};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      0.4682106281879652,    -0.4270868837436479,  0.5402504256290986,
      -0.0507474945608557,   -0.4826534832205523,  0.028702432627113066,
      1.0186147937913688,    -0.9438319452525313,  0.4919761921900252,
      -0.2985707715319067,   -0.6870897321384496,  -0.4847580207264329,
      0.2255840843833596,    -0.3723378775479727,  -0.1675179803390648,
      -0.026861485418527054, 0.04546427523441836,  -0.09916877361085912,
      -0.005045515778053482, -0.16094279098367656, -0.023879808324600186,
      0.16212374050435704,   -0.1346698972671704,  0.20948516847076376,
      -1.60637446858808,     -0.1949143070834378,  -0.4135056773356823,
      0.2666847415479645,    0.2133761278118905,   1.7351548557716456,
      0.8549340685945972,    -0.0569880676375796,  0.29010065959948556,
      -0.07092381711465875,  -0.10701345244803492, -0.8987821160433251};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse84) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      -2.728808463924107,  0.819571856029575,   -3.4441279127705604,
      -2.1579659224927106, -1.5815169739288306, 3.380979165165682,
      4.961188593117322,   -3.3784567809947044, 1.906735204641481};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      -0.14506122597120796, -0.1738108742741484, 0.04617396634711357,
      -0.36042632207220826, -0.2050547058032852, -0.2874382698614362,
      -0.261183960441692,   0.08891641854619732, -0.10498339076331076};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse85) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      1.2622675905463145,  4.3600013586329,     -1.1496716878800042,
      1.9103869051739828,  -1.2173402317565918, 0.9695504971372468,
      -2.8692116441508864, -1.0792955180240424, -2.554401034463276,
      -2.912458884704793,  -1.1387632912282895, 3.5441674071653306,
      2.3294003073141365,  0.623674433587686,   1.3441409015198484,
      -0.5251994183032105, -3.3418811704700238, 1.4357302313916946,
      -4.301573029084585,  -3.677151641633407,  1.5063327014781187,
      1.2873084123399794,  -3.929862259588015,  3.6745351730998035,
      -2.2065678105397044, 4.457559190535232,   -4.047898228679767,
      0.7261044258727622,  -3.0133870824167364, -2.4648296832743357,
      -3.224420902646087,  4.8359869503113515,  -3.331720914150962,
      -2.1864787212686343, 0.16759318452920446, -0.3450870102602108};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      0.05877655714892883,  0.10202228052150282,   0.06678657181059347,
      -0.13537327975487212, 0.030719635724083053,  -0.17008512164153594,
      0.08141300736187584,  -0.11428342890899341,  0.061256031095594854,
      0.027771371724089854, -0.08286937767976182,  0.19747871018202,
      -0.08425702221764794, -0.26092987977116733,  0.14289117405522508,
      0.12494138458744361,  -0.17457062020144948,  0.2552136745085254,
      0.19644060707687952,  -0.024772996666187843, -0.18840701534339324,
      0.06327760571316039,  0.0478443996725613,    -0.1543225734177609,
      0.07628897046413337,  0.001089258066545197,  -0.1684472533590522,
      -0.03630274675263836, -0.12657932337940905,  0.042257347951728565,
      0.19758804860290008,  0.12187585716344956,   -0.033240445139608506,
      0.029248764567090517, -0.12753963689369696,  -0.006853876008285198};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse86) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -3.972064994320803,  -2.513761072920607,  -0.08285574168693,
      1.8891414415065677,  4.8628447370345835,  3.6453307868693603,
      -0.9943655820314863, 3.597218799731799,   -4.743836862385536,
      -1.079222995096445,  1.5226068299050652,  1.4887785429609677,
      0.05945808506227124, -2.7404706372122414, 2.6683640173906458,
      2.5734458572005288,  2.914429396518824,   -2.9091214711921944,
      -0.5627920828460713, -3.5702023875354194, -0.5416677186523833,
      -1.0529902483658624, 0.5429971584197544,  3.927384446411901,
      3.2133645461340485,  -1.347899240671162,  -4.610721329040065,
      1.4667185728782473,  1.9870285258349938,  0.11515232316814394,
      3.8327564909349814,  3.8554621586910436,  4.771882758317592,
      -2.352908101283413,  -3.9723777813690253, -4.775814874897737,
      -2.6682535415830833, 1.2670026636143685,  -2.885149643483036,
      -4.912700902826794,  0.2483146788482138,  1.6525106454295768,
      -4.7425128806102865, 0.4893638594880887,  4.854074549529862,
      -4.26916538521839,   3.7269789312741697,  2.315268427892062,
      3.589001517140689,   -1.981372719455352,  -0.5344879051655553,
      0.464010292416007,   2.8186629874417832,  -4.001925737170388,
      0.4459438370743136,  -1.4163432419199404, -4.888244617933753,
      -2.275817967025956,  4.893579202478369,   1.1098623350351735,
      -2.291692196370707,  -3.14640548712257,   -0.6185461152813634,
      -1.3388124576722515};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      -0.04729633325627219,  -0.0961213286929102,   0.03551479964275322,
      0.04822986003514335,   -0.06500160585920857,  -0.06309041246030794,
      0.08218433865622839,   -0.026298416160032416, -0.06295630120275422,
      -0.2300412573557872,   0.014283007352274172,  -0.04109252772200985,
      -0.10392470120693013,  0.1341053886033815,    -0.13156545315446744,
      0.0646697376833911,    -0.042315710957422814, 0.6963672883094522,
      -0.023376215340689854, -0.29878461579888,     -0.02271888531206058,
      -0.36410120973385673,  0.35822874497506474,   -0.6294170078825696,
      0.020680291238986466,  -0.8903890350109882,   -0.02806435282689534,
      0.42282850945468786,   -0.1497312069898622,   0.25761872209346887,
      -0.27960568937442865,  0.7701318628362558,    0.06589750743026969,
      0.5591226133222653,    -0.06023930162183413,  -0.2823586200505151,
      0.04409421163919641,   -0.1788079254585325,   0.32065664121455767,
      -0.5482890646012805,   0.020499875147823414,  0.6836613553754566,
      -0.11208436771829128,  -0.1787966693554256,   0.08886797006305693,
      -0.3465194972977277,   0.2206883654980001,    -0.6333015912406685,
      -0.10682020016013559,  1.6485257626273457,    -0.20928602145516498,
      -0.41005596251362825,  0.1874863512703573,    -0.6333562217551679,
      0.5915940509580295,    -1.3221568164381003,   0.030553657882867367,
      -0.7761999449150079,   0.20056160869760453,   0.24514217996374155,
      -0.16412621633671065,  0.29816628055541244,   -0.3396822475878616,
      0.6146964339131827};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse87) {
  S21Matrix matrix(6, 6);
  double *arr1 = new double[36]{
      1.7901977615852207,   -2.1137301038156386,   -0.07894233962503971,
      -2.0132143693333973,  4.642326526456719,     -2.632727656306384,
      2.938962149956903,    -1.7622192198188769,   4.43834048795463,
      4.871475976720548,    -0.007461022282429397, 2.3488878033921594,
      0.21823014249035388,  0.49702763177831955,   2.4165073054057737,
      0.49812442684862646,  2.1744396309601877,    3.1298788377153777,
      -0.22152249691011594, 4.698688605365531,     -1.830007164196009,
      -2.5695988156686758,  2.2254010981377492,    4.548489334648316,
      2.0383950472099723,   -4.217854263037953,    4.355381327507949,
      2.6593042615799494,   2.4751915440661323,    4.758476282537419,
      -3.076578472321482,   0.6066265876129062,    -4.08030795194094,
      1.0244948636556543,   1.2087106240665912,    1.8175026725416448};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(6, 6);
  double *arr2 = new double[36]{
      0.08949530928084665,   0.18902715724527336,  -0.4532490353400943,
      0.23288332146961221,   0.0683900571933445,   -0.09599546457777282,
      0.011642809763751948,  0.13432104356580568,  0.1882281312764838,
      0.04620730793848801,   -0.22605635776009075, -0.004662215359744555,
      -0.048486119594518186, -0.07206727187095663, 0.38678626715076836,
      -0.13988201244820805,  -0.07119038455459728, -0.10671641319092244,
      0.034522921758964306,  0.2321154027850223,   0.054514173998116144,
      -0.05076665243927411,  -0.1420868537339572,  0.15520315746917468,
      0.15342405676930906,   0.056480625596549296, 0.21419987471773164,
      -0.029197338848525378, -0.09360117499277905, 0.09850890904622611,
      -0.0827375062975245,   -0.0550493090218828,  -0.1349040589303041,
      0.11278819864168284,   0.17373535326854514,  -0.003311570311414188};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse88) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      -1.0553358386636633, 0.1598106931849177,  4.910215413785021,
      -3.438936909825061,  -2.5948347233871596, 2.4598323241423445,
      1.7841042890990924,  -1.385902901682985,  -2.7647356947261645,
      -4.937879329718444,  2.0412689077932615,  2.3397467427012515,
      4.6608880704298326,  0.5366608036688376,  -0.1962271670157234,
      -3.772230952464245,  -4.390404676507202,  -1.4996764484017158,
      2.579951205789115,   2.0287779655187563,  -3.2720505873582773,
      2.495564424247921,   2.0076662410273824,  -1.1623483142023492,
      0.05568077161158147, -2.1899689616057905, -3.8885222801207076,
      1.8112838997767167,  2.4389213035136024,  3.8631561162528065,
      0.672346457465256,   4.301003032593307,   2.938475415283542,
      -3.869409311425962,  -1.6064288294688844, -3.7126195816591,
      2.5515195258928305,  2.0336396821748046,  -0.3677382061007064,
      -0.454121069273139,  2.145211333808426,   0.2726578226791423,
      -0.9948322491505577, 0.225927162463881,   -2.704299786628633,
      -3.1691642031175347, 1.4289970003441423,  -1.354214298919345,
      -3.2368242331692554, 4.320678513061829,   1.3232746011060303,
      -1.607104447048524,  -4.3708217983757915, 2.266801443149312,
      -0.0833356548246611, 2.839922134915817,   1.2623733092073453,
      1.0853574622414852,  -4.481131225739343,  1.5519991067761572,
      2.37577869132386,    -0.9989347643900972, -1.8597646224804985,
      -1.2788040069337803};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.03653409007357586,    -0.518148361639331,     0.2683358628957082,
      -0.1294228611219852,    -0.0456863902664823,    -0.45688341572887947,
      -0.5822485175660458,    0.016671424234409135,   0.2826495674084219,
      0.06607363936791891,    -0.19148808510683799,   0.12130646998007266,
      -0.20288797118989654,   0.07525027481339916,    0.05565078558011478,
      0.19676202582606075,    -0.0031890492193986965, -0.24309855296208457,
      0.11726607741710654,    -0.13123681188408354,   -0.08968714269015299,
      -0.35760662609717253,   -0.325932070245759,     -0.140699612260586,
      -0.06157201538133563,   -0.3789719415257476,    0.3150006823640859,
      -0.09271387791768304,   -0.13620708337497042,   -0.40772453760175553,
      -0.4703099351523896,    0.022174352311987163,   0.2308538593801108,
      0.3329948817442329,     -0.3704511958732855,    0.21517289820691768,
      -0.1447971555493731,    0.2314627787597106,     0.19263636385375302,
      0.06205445474013844,    0.1317832151253981,     -0.32675658672612234,
      0.2698948812197991,     -0.028141975692454996,  -0.007551318840292202,
      -0.37921230198133726,   -0.32360028234434285,   0.16669975691756325,
      0.47853764194622617,    0.5590006341508071,     -0.5126056723184677,
      0.48127447188658723,    -0.2264162087040417,    0.7668792111105989,
      0.41123814536706255,    0.09859915176112759,    -0.1575896059259374,
      -0.0025568324046534065, -0.07983118300187912,   0.04436675554546943,
      -0.002153994019297981,  -0.017901116069489964,  0.056396892213825586,
      -0.23690498998153198};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse89) {
  S21Matrix matrix(2, 2);
  double *arr1 = new double[4]{-1.283169894123585, -4.647856882156555,
                               1.1126933798526775, -1.2655589752380414};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(2, 2);
  double *arr2 = new double[4]{-0.18623302809306816, 0.6839542670418917,
                               -0.16373812799209791, -0.18882455864654502};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse90) {
  S21Matrix matrix(4, 6);
  double *arr1 = new double[24]{
      4.359915778938337,   -4.497577822223057,  4.029843705207458,
      2.897936566705665,   1.8937256844527504,  2.5448874887432362,
      -1.3395856164251874, 1.3188059642605854,  -2.5764058268329992,
      3.4915103668952767,  -2.7087715745961107, -0.36374554577164453,
      1.2658272550829528,  4.210689914739442,   0.543665364013334,
      2.6114733434751933,  3.1044339862077504,  -1.6223959577538851,
      -2.363447013465408,  -2.7585875383717418, -4.455523393997901,
      -3.660628696848871,  3.539258328205152,   2.9220180223615824};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse91) {
  S21Matrix matrix(8, 3);
  double *arr1 = new double[24]{
      1.8187262986887731,    3.3455557526840636,  -3.7948571866939296,
      1.4359352484178594,    -1.5337195246754365, 1.873783928593836,
      3.5253985185845576,    -3.848227543564162,  1.0150617445137664,
      2.4733218213371133,    -0.952028464087431,  -4.8460142114658735,
      -0.003568853154538587, 3.9442575688661616,  2.500616823098741,
      2.409808042863424,     -1.2847593586757542, -4.921444595523909,
      4.081924930023135,     2.6916105793756913,  -3.5107687895415562,
      -0.3860872039276444,   -0.4948244960779231, 2.050084401719122};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse92) {
  S21Matrix matrix(6, 7);
  double *arr1 = new double[42]{
      -1.777173225893466,  4.947632682898913,    -4.287004178788086,
      -4.475695491714672,  -3.0820635935641483,  3.1374064786239124,
      4.0534616237995245,  -4.26848755127458,    3.1931003869923984,
      0.48580009292265736, 2.2711434937095447,   2.922773163721871,
      -3.7161274549556076, -1.6346032420755674,  -3.567883936945936,
      -3.1682083727773582, 1.6409442896456747,   3.461993183639546,
      -4.89667494418312,   -2.7251778316803312,  2.6964727015468792,
      -4.247159360907251,  -3.962928942020726,   -3.3870854689898944,
      0.6631984060486467,  -3.824288015219569,   -3.2880217623210264,
      -3.383793727047987,  2.891666980137514,    0.6293994392762849,
      -1.7294146755647546, -0.35680146454627426, -3.4988118166064774,
      3.9592229376408277,  -2.1381053876281877,  3.2666157228937447,
      -0.5666392382248384, -4.800346532683677,   4.425474239519517,
      -2.3173524450197904, -2.866597888695911,   -0.12291853149292997};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse93) {
  S21Matrix matrix(8, 8);
  double *arr1 = new double[64]{
      1.7758966128670108,  -0.28394479833092756, 2.7492919694803284,
      -1.5017919655113774, 3.778735544598991,    0.9428587502867147,
      -2.5702135520752947, -4.684258791540748,   -0.5601631240677367,
      -4.854238224000626,  -2.4096458297096692,  1.986857144825346,
      -4.590914253317119,  -1.371396917879284,   3.0455895335232306,
      -3.0679532138780843, 4.183708331605748,    1.352403538090762,
      -0.5637167471447446, 0.47031764821327116,  -1.7018765588531193,
      2.880246087985416,   0.49114009079283427,  3.616856316518822,
      1.9936216692952913,  -1.8856823532305023,  0.36740097556235174,
      3.0832077715972535,  -1.3954090488513127,  -0.7818721638352075,
      -1.1315464886807636, 3.313362618531242,    1.6330729175499057,
      -0.7644286161485789, 4.093725974011424,    -3.926093371224545,
      2.5110809075545113,  -0.3541380865159125,  3.1022664848362833,
      -4.49377227075808,   -2.9566715902196448,  -1.1478772061868892,
      -3.6789521068469755, 0.4075637309624973,   -3.294868501180117,
      4.3092738424855295,  2.789459816736647,    -4.791246812577084,
      2.3639835602898884,  0.09060855703361526,  1.151330971383314,
      -1.8066829086611023, -4.994675674531386,   -4.724737380634485,
      1.276869030869861,   1.9775320707218649,   3.296216971124741,
      3.6553748867362668,  3.018354842522502,    -4.752535870275483,
      3.246245608366907,   3.38136110724691,     -3.6103959325842028,
      -3.372222953138211};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(8, 8);
  double *arr2 = new double[64]{
      0.34761369006654314,  0.07302337755574433,  0.3115815898503128,
      -0.2807740202044491,  -0.09173732573469184, -0.09992468051671778,
      0.06553454423738045,  -0.1883321415297965,  1.0592929149397443,
      -0.7098449897679293,  0.37835884718860935,  -0.37344612185477893,
      -0.18827775496601332, 0.42357270498166794,  0.5102691234121611,
      -0.8384422581036814,  0.1578608185956328,   -0.4824753490801526,
      -0.16763624985742187, 0.4945173647380295,   0.19010500404436878,
      0.390848201112988,    0.21934021321144434,  -0.15427108552774452,
      1.1206554413970438,   -0.686710942085502,   0.33621337680771823,
      -0.11579786851218254, -0.13950675633125523, 0.4635165174172957,
      0.43377177439516207,  -0.9033805906862258,  -0.008860725229517075,
      0.16129307084641242,  0.09986836813543418,  -0.248184496992982,
      -0.00956935182825748, -0.23996245615715445, -0.18217858408972865,
      -0.02431378779743159, -0.382279227181928,   0.05139817409554587,
      -0.1261535955633218,  0.3163536810857992,   0.1264425693543411,
      0.06591743214087512,  -0.16697526507472166, 0.29971118257078844,
      0.29647264389556116,  -0.19825436685717596, 0.22276831655905405,
      -0.19572703360976162, 0.07647468034879719,  0.10773258773995616,
      0.10798546376043447,  -0.3764880394496793,  -0.6593052160100356,
      0.2569395343419641,   -0.1780497048392556,  0.2144208839592013,
      0.10870662056867696,  -0.2221859139695837,  -0.2562400806215664,
      0.4257943569729873};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse94) {
  S21Matrix matrix(5, 6);
  double *arr1 = new double[30]{
      -3.9561134984005344, -4.2228729467503,    -4.917133290552147,
      -4.371259156756947,  3.7310534867140586,  -0.2096843024046553,
      3.055611747061862,   3.066117926857885,   -3.1444726963980996,
      0.4305533517122857,  2.522025015610642,   0.06267165735768465,
      -1.273076688370045,  1.6492525775677267,  -4.951216249980746,
      -3.824076358985249,  4.5931470332907995,  -4.763594922931363,
      1.183778997987245,   -2.2893669068849554, 3.2074253434440507,
      -3.5436845224678635, -4.221434944869657,  3.391136371289715,
      -1.623355262795314,  3.1342201869777053,  0.9006212551684403,
      2.5461344589584103,  -0.2590856276838105, 3.9702663055120038};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse95) {
  S21Matrix matrix(5, 3);
  double *arr1 = new double[15]{
      -0.1295046992192752, 4.570393659802441,   -2.799324516525675,
      1.8281874108126308,  -4.905395138080064,  -2.3894105968124144,
      3.6894991554013075,  0.48265629343548166, 3.6745265571866703,
      2.56880127807987,    -4.86087911451046,   4.788974089630797,
      0.7905862786271616,  -4.437890085336611,  0.26197318563889826};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse96) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      -3.0984598658431683, -3.7057353928566563,  -0.2699712646285368,
      -2.7183610237678657, 0.26139408129291386,  -4.488022573960447,
      2.1701156069742025,  0.2890356855214833,   -1.8634665253387217,
      0.9816022430989699,  -4.1203158355373475,  -4.727665206995142,
      0.3367122154642015,  -3.6756886595578644,  1.5926630628908072,
      2.59066805766542,    -1.9958418104739084,  -1.8530595967678263,
      4.181615413395555,   2.2081365800774764,   3.314454071536943,
      -1.9227728830062496, -0.34510562302049497, -4.271637374643829,
      3.417531446293582};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      -0.04056243568199896,  -0.1195758532647215,  -0.0404510066466302,
      -0.034759303011173345, 0.0787576715078772,   0.02562861685093358,
      0.1584688080839732,    -0.16873659500052898, -0.017597166885066136,
      0.04252923087059684,   -1.2023996634649714,  -0.2766608325455915,
      0.9607751865734212,    -0.20642449029236626, -0.14294137211412464,
      -0.2769500439598416,   -0.04002931869388509, 0.2099175551457775,
      0.09592355801247202,   -0.1271251747568176,  -0.41382639085707557,
      0.12715618414364432,   0.30369623930311007,  0.12286212076440828,
      0.0668239199608597};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse97) {
  S21Matrix matrix(5, 3);
  double *arr1 = new double[15]{
      3.525581290356328,  4.627038621510563,   0.9572658558698057,
      3.5362360103805575, 1.5789581478139523,  1.6241899498083265,
      1.099065644652745,  -0.6273413255773388, 4.474305088986375,
      4.828408225662113,  -3.542234081772632,  3.7808805678307973,
      3.6142593146078212, -3.827779820384636,  3.4830590915070854};
  matrix.fillMatrixFromArray(arr1);

  delete[] arr1;

  EXPECT_THROW(matrix.InverseMatrix(), std::invalid_argument);
}

TEST(MatrixInverseTest, Inverse98) {
  S21Matrix matrix(5, 5);
  double *arr1 = new double[25]{
      -0.4025642559840783,  0.9244269905791649,  -2.9051326870252647,
      1.4565161981301502,   -1.6705680395203304, 4.990218620932422,
      -0.40324643563309337, 3.6643807124516474,  1.312884238806249,
      1.0572409999726542,   1.8475714331662285,  -0.7599855886930449,
      -2.702845967608317,   -0.9768533560568846, 0.9370633221025892,
      0.5092252608772521,   -3.789283017545136,  0.45408811015392825,
      2.716049913156584,    1.8883031543463549,  -1.4780571724828064,
      -3.5369903307953665,  4.002111554748835,   -0.49490598366824123,
      1.7770006829405007};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(5, 5);
  double *arr2 = new double[25]{
      0.2323068943296958,   0.19915695955570306,     0.19455317472196576,
      -0.12680944339763925, 0.1320616249313992,      -0.6543108685003841,
      -0.13207768933971176, -0.3076982464887306,     0.19759883951047894,
      -0.5842578775157653,  -0.00030474855755256047, 0.08308057872056528,
      -0.13048772644153178, -0.069911217055771,      0.09338405910106362,
      -0.15559928268152726, -0.03167308020743996,    -0.28062991385912095,
      0.3097672616717662,   -0.30862093237221394,    -1.1517810554705314,
      -0.2931710063913824,  -0.2349036762530196,     0.5315539534519589,
      -0.7866016108028103};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse99) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      -0.8123870496168974, 4.703128131276568,  -2.3527982068118822,
      4.349068139506064,   -4.804526554315527, -1.2142999750922456,
      -2.2776894113248183, 4.430877021423603,  -1.6820845514843796};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      0.7972501032840855,  -0.1488784934479156,  -1.0076695972304397,
      0.59703581494294,    -0.2364407300527331,  -0.6644106095619012,
      0.49314058216502854, -0.42122783244974554, -0.9801905198625037};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}

TEST(MatrixInverseTest, Inverse100) {
  S21Matrix matrix(3, 3);
  double *arr1 = new double[9]{
      0.017393511716711885, -1.0311394900573667, 4.718671688269998,
      -2.634122960801115,   2.382723878453863,   -4.911141683581301,
      3.859168792940853,    -2.877165681240763,  0.16952946149651726};
  matrix.fillMatrixFromArray(arr1);

  S21Matrix result = matrix.InverseMatrix();

  S21Matrix expected(3, 3);
  double *arr2 = new double[9]{
      -1.2238030685564558,  -1.1948592846000792,  -0.5509269372639655,
      -1.6499905717417567,  -1.6233179300411917,  -1.10057894063321,
      -0.14412619666334786, -0.35032834086052084, -0.2384713173140062};
  expected.fillMatrixFromArray(arr2);

  delete[] arr1;
  delete[] arr2;

  ASSERT_TRUE(result == expected);
}
